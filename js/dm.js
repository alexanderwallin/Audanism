// Generated by CoffeeScript 1.4.0

/*
	DisharmonyCalculator
*/


(function() {
  var AgreeablenessFactor, ConscientiousnessFactor, DisharmonyCalculator, Environment, ExtraversionFactor, Factor, FactorBucket, FactorComparer, GUI, Interpreter, MouseSourceAdapter, NeuroticismFactor, Node, NodeCell, NodeComparer, OpennessFactor, Organism, OrganismDisarmonyCalculator, RandomSourceAdapter, Sound, SourceAdapter, getRandomElements, pushMany,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DisharmonyCalculator = (function() {

    DisharmonyCalculator.NODE_COMPARISON_MODE_UNKNOWN = 0;

    DisharmonyCalculator.NODE_COMPARISON_MODE_FACTOR_HARMONY = 1;

    DisharmonyCalculator.NODE_COMPARISON_MODE_ORGANISM_HARMONY = 2;

    DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_NONE = 3;

    DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_1 = 4;

    DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_2 = 5;

    DisharmonyCalculator.NODE_ACTION_SAVE_VALUE_1 = 6;

    DisharmonyCalculator.NODE_ACTION_SAVE_VALUE_2 = 7;

    DisharmonyCalculator.NODE_ACTION_SAVE_BOTH = 8;

    function DisharmonyCalculator(_organism, debug) {
      this._organism = _organism;
      this.debug = debug != null ? debug : false;
    }

    /*
    		Organism disharmony
    */


    DisharmonyCalculator.prototype.getSummedOrganismDisharmony = function() {
      var avgDisharmony, factor, sumDisharmony, _i, _len, _ref;
      console.log("#getSummedOrganismDisharmony");
      sumDisharmony = 0;
      _ref = this._organism.getFactors();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        factor = _ref[_i];
        sumDisharmony += this.getFactorDisharmonyForNodes(factor, this._organism.getNodes());
      }
      avgDisharmony = sumDisharmony / this._organism.getNodes().length;
      return sumDisharmony;
    };

    DisharmonyCalculator.prototype.getActualOrganismDisharmony = function() {
      var actualDisharmony, correlatingFactorType, correlationValue, correlations, disharmonies, disharmonyDiff, factor, factorType, _i, _j, _k, _len, _ref, _ref1, _ref2;
      disharmonies = [];
      _ref = this._organism.getFactors();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        factor = _ref[_i];
        disharmonies[factor.factorType] = this.getFactorDisharmonyForNodes(factor, this._organism.getNodes());
      }
      console.log("#getActualOrganismDisharmony");
      console.log("      ... before:", disharmonies);
      correlations = Factor.FACTOR_CORRELATIONS;
      for (factorType = _j = 1, _ref1 = Organism.NUM_FACTORS; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; factorType = 1 <= _ref1 ? ++_j : --_j) {
        for (correlatingFactorType = _k = 1, _ref2 = Organism.NUM_FACTORS; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; correlatingFactorType = 1 <= _ref2 ? ++_k : --_k) {
          if ((correlations[factorType] != null) && (correlations[factorType][correlatingFactorType] != null)) {
            correlationValue = correlations[factorType][correlatingFactorType];
            console.log("--- adjust for correlation " + factorType + " <---> " + correlatingFactorType + " (" + correlationValue + ")");
            disharmonyDiff = Math.abs(disharmonies[factorType] - disharmonies[correlatingFactorType]);
            disharmonies[factorType] += Math.pow(disharmonyDiff, 2.2) * (100 - correlationValue) / (100 * disharmonyDiff);
          }
        }
      }
      console.log("      ... after:", disharmonies);
      actualDisharmony = disharmonies.reduce(function(a, b) {
        return a + b;
      });
      console.log("  actualDisharmony =", actualDisharmony);
      return actualDisharmony;
    };

    /*
    		Factor-node disharmony
    */


    DisharmonyCalculator.prototype.getFactorDisharmonyForNodes = function(factor, nodes) {
      var disharmony, node, _i, _len;
      disharmony = 0;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (node.hasCellOfFactorType(factor.factorType)) {
          disharmony += this.getFactorDisharmonyForNode(factor, node);
        }
      }
      return disharmony;
    };

    DisharmonyCalculator.prototype.getFactorDisharmonyForNode = function(factor, node) {
      var cell, disharmony, _ref;
      disharmony = 0;
      cell = node.getCell(factor.factorType);
      if (!cell) {
        return;
      }
      if ((0 <= (_ref = cell.factorValue) && _ref <= factor.factorValue)) {
        disharmony = this._calcFactorDisharmonyForNode_lteF(cell.factorValue, factor.factorValue);
      } else {
        disharmony = this._calcFactorDisharmonyForNode_gtF(cell.factorValue, factor.factorValue);
      }
      return disharmony;
    };

    DisharmonyCalculator.prototype.getRelativeDisharmonyForFactors = function(factors) {};

    /*
    		Node comparison
    */


    DisharmonyCalculator.prototype.alterNodesInComparisonMode = function(nodes, comparisonMode) {
      var aCell, bCell, cell, cellsToCompare, comparisonFn, currentDisharmony, factor, factorType, neededSaveNode, newDisharmony1, newDisharmony2, node, nodeAction, smallestNewDisharmony, testNodes, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1;
      console.log("DisharmonyCalculator.alterNodesInComparisonMode --- mode: " + comparisonMode + ", nodes:", nodes);
      comparisonFn = comparisonMode === DisharmonyCalculator.NODE_COMPARISON_MODE_FACTOR_HARMONY ? 'getFactorDisharmonyForNodes' : 'getActualOrganismDisharmony';
      console.log("   comparisonFn = " + comparisonFn);
      $(".node.comparing").removeClass('comparing');
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        $(".node[data-node-id=" + node.nodeId + "]").addClass('comparing');
      }
      cellsToCompare = [];
      _ref = nodes[0].getCells();
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        aCell = _ref[_j];
        _ref1 = nodes[1].getCells();
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          bCell = _ref1[_k];
          if (aCell.factorType === bCell.factorType) {
            cellsToCompare.push(aCell.factorType);
          }
        }
      }
      for (_l = 0, _len3 = cellsToCompare.length; _l < _len3; _l++) {
        factorType = cellsToCompare[_l];
        testNodes = nodes;
        for (_m = 0, _len4 = nodes.length; _m < _len4; _m++) {
          node = nodes[_m];
          Node._idCounter--;
        }
        console.log(testNodes);
        nodeAction;

        neededSaveNode = false;
        for (_n = 0, _len5 = nodes.length; _n < _len5; _n++) {
          node = nodes[_n];
          cell = node.getCell(factorType);
          if (cell.factorValue === 0) {
            node.addCellValue(factorType, 1);
            neededSaveNode = true;
          }
          if (cell.factorValue === 100) {
            node.addCellValue(factorType, -1);
            neededSaveNode = true;
          }
          if (neededSaveNode) {
            console.log(" >>> ABRUPT: Needed to save nodes <<<");
            return;
          }
        }
        factor = this._organism.getFactorOfType(factorType);
        currentDisharmony = this[comparisonFn](factor, testNodes);
        testNodes[0].addCellValue(factorType, -1);
        testNodes[1].addCellValue(factorType, 1);
        newDisharmony1 = this[comparisonFn](factor, testNodes);
        testNodes[0].addCellValue(factorType, 2);
        testNodes[1].addCellValue(factorType, -2);
        newDisharmony2 = this[comparisonFn](factor, testNodes);
        testNodes[0].addCellValue(factorType, -1);
        testNodes[1].addCellValue(factorType, 1);
        smallestNewDisharmony = newDisharmony1 < newDisharmony2 ? newDisharmony1 : newDisharmony2;
        nodeAction = newDisharmony1 < newDisharmony2 ? DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_1 : DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_2;
        this._performAction(nodes, factorType, nodeAction);
      }
      return true;
    };

    DisharmonyCalculator.prototype._performAction = function(nodes, factorType, action) {
      switch (action) {
        case DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_1:
          nodes[0].addCellValue(factorType, -1);
          return nodes[1].addCellValue(factorType, 1);
        case DisharmonyCalculator.NODE_ACTION_MOVE_VALUE_2:
          nodes[0].addCellValue(factorType, 1);
          return nodes[1].addCellValue(factorType, -1);
      }
    };

    DisharmonyCalculator.prototype._calcFactorDisharmonyForNode_lteF = function(c, F) {
      var result;
      result = -(Math.pow(c, 2)) / (Math.pow(F, 2)) + 1;
      result = Math.pow(result, 6);
      result = Math.pow(result + 1, 10);
      return result;
    };

    DisharmonyCalculator.prototype._calcFactorDisharmonyForNode_gtF = function(c, F) {
      var result;
      result = -((c - F) * (c - 200 + F)) / Math.pow(100 - F, 2);
      result = Math.pow(result, 6);
      result = Math.pow(result + 1, 10);
      return result;
    };

    return DisharmonyCalculator;

  })();

  window.DisharmonyCalculator = DisharmonyCalculator;

  FactorComparer = (function() {

    function FactorComparer() {}

    FactorComparer.getFactorDisharmonyForNodes = function(factor, nodes) {
      var disharmony, node, _i, _len;
      disharmony = 0;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        disharmony += FactorComparer.getFactorDisharmonyForNode(factor, node);
      }
      return disharmony;
    };

    FactorComparer.getFactorDisharmonyForNode = function(factor, node) {
      return 0.01 * Math.abs(factor.factorValue - node.getCellValue(factor.factorType));
    };

    FactorComparer.getRelativeDisharmonyForFactors = function(factors) {};

    return FactorComparer;

  })();

  window.FactorComparer = FactorComparer;

  NodeComparer = (function() {

    function NodeComparer() {}

    NodeComparer.COMPARISON_MODE_UNKNOWN = 0;

    NodeComparer.COMPARISON_MODE_FACTOR_HARMONY = 1;

    NodeComparer.COMPARISON_MODE_ORGANISM_HARMONY = 2;

    NodeComparer.alterNodesInComparisonMode = function(nodes, comparisonMode) {
      console.log("NodeComparer.alterNodesInComparisonMode --- mode: " + comparisonMode + ", nodes:", nodes);
      if (comparisonMode === NodeComparer.COMPARISON_MODE_FACTOR_HARMONY) {
        return this._alterNodesUsingFactorHarmonyComparison(nodes);
      } else {
        return this._alterNodesUsingOrganismHarmonyComparison(nodes);
      }
    };

    NodeComparer._alterNodesUsingFactorHarmonyComparison = function(nodes) {
      var aCell, bCell, node, _i, _j, _len, _len1, _ref, _results;
      console.log("   #_alterNodesUsingFactorHarmonyComparison");
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        $(".node[data-node-id=" + node.nodeId + "]").addClass('comparing');
      }
      _ref = nodes[0].getCells();
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        aCell = _ref[_j];
        _results.push((function() {
          var _k, _len2, _ref1, _results1;
          _ref1 = nodes[1].getCells();
          _results1 = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            bCell = _ref1[_k];
            if (aCell.factorType === bCell.factorType) {
              console.log("      alter factor " + aCell.factorType + " for cells in " + nodes[0].nodeId + " and " + nodes[1].nodeId);
              _results1.push(FactorComparer.getFactorDisharmonyForNodes);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    NodeComparer._alterNodesUsingOrganismHarmonyComparison = function(nodes) {
      return console.log("   #_alterNodesUsingOrganismHarmonyComparison");
    };

    return NodeComparer;

  })();

  window.NodeComparer = NodeComparer;

  OrganismDisarmonyCalculator = (function() {

    function OrganismDisarmonyCalculator() {}

    OrganismDisarmonyCalculator.getSummedOrganismDisharmony = function(organism) {};

    OrganismDisarmonyCalculator.getActualOrganismDisharmony = function(organism) {};

    return OrganismDisarmonyCalculator;

  })();

  window.OrganismDisarmonyCalculator = OrganismDisarmonyCalculator;

  /*
  	Environment
  */


  Environment = (function() {

    Environment.NUM_ORGANISMS = 1;

    Environment.TIME_INTERVAL = 100;

    function Environment() {
      var i, organism, _i, _len, _ref;
      this._iterationCount = 0;
      this._isRunning = false;
      this._isSingleStep = true;
      this._organisms = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Environment.NUM_ORGANISMS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Organism);
        }
        return _results;
      })();
      this._gui = new GUI;
      _ref = this._organisms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        organism = _ref[_i];
        this._gui.update(organism.getFactors(), organism.getNodes(), organism.getDisharmonyHistoryData(200));
      }
      this.listenToControls();
      this.createInfluenceSources();
      this.run();
    }

    Environment.prototype.run = function() {
      var _this = this;
      this._intervalId = setInterval(function() {
        return _this.handleIteration();
      }, Environment.TIME_INTERVAL);
      return this.handleIteration();
    };

    Environment.prototype.start = function() {
      return this._isRunning = true;
    };

    Environment.prototype.pause = function() {
      return this._isRunning = false;
    };

    Environment.prototype.stop = function() {
      this._isRunning = false;
      return clearInterval(this._intervalId);
    };

    Environment.prototype.step = function() {
      return this._isSingleStep = true;
    };

    Environment.prototype.listenToControls = function() {
      var _this = this;
      $(document).on('dmstart', function(e) {
        return _this.start();
      });
      $(document).on('dmpause', function(e) {
        return _this.pause();
      });
      $(document).on('dmstop', function(e) {
        return _this.stop();
      });
      return $(document).on('dmstep', function(e) {
        return _this.step();
      });
    };

    Environment.prototype.handleIteration = function() {
      var organism, _i, _len, _ref, _results;
      this._iterationCount++;
      if (this._isRunning || this._isSingleStep) {
        _ref = this._organisms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          organism = _ref[_i];
          organism.performNodeComparison();
          this._gui.update(organism.getFactors(), organism.getNodes(), organism.getDisharmonyHistoryData(200));
          _results.push(this._isSingleStep = false);
        }
        return _results;
      }
    };

    Environment.prototype.createInfluenceSources = function() {
      var sourceAdapter, _i, _len, _ref, _results;
      this._influenceSources = [];
      this._influenceSources.push(new RandomSourceAdapter(this));
      _ref = this._influenceSources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sourceAdapter = _ref[_i];
        _results.push(sourceAdapter.activate());
      }
      return _results;
    };

    Environment.prototype.influence = function(influenceData) {
      var argNum, argVal, cell, factor, factors, node, nodes, num, numType, organism, type, valType, valueMod, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
      if (!this._isRunning) {
        return;
      }
      console.log("---");
      console.log("#influence", influenceData);
      if (influenceData.random != null) {
        type = influenceData.random['object'];
        argNum = influenceData.random.num;
        argVal = influenceData.random.valueModifier;
        num = 0;
        valueMod = -1;
        numType = typeof argNum;
        if (numType === 'integer') {
          num = argNum;
        } else if (numType === 'array') {
          num = Math.randomRange(argNum[1], argNum[0]);
        } else if (numType === 'string' && argNum === 'rand') {
          num = Math.randomRange(type === 'factor' ? 1 : 5);
        }
        if (type === 'factor') {
          _ref = this._organisms;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            organism = _ref[_i];
            factors = getRandomElements(organism.getFactors(), num);
            for (_j = 0, _len1 = factors.length; _j < _len1; _j++) {
              factor = factors[_j];
              valType = typeof argVal;
              if (valType === 'integer') {
                valueMod = argVal;
              } else if (valType === 'array') {
                valueMod = Math.randomRange(argVal[1], argVal[0]);
              } else if (valType === 'string' && argVal === 'rand') {
                valueMod = Math.randomRange(5, -5);
              }
              console.log("    --> influence: factor " + factor.factorType + " by " + valueMod);
              console.log("        ... before: " + factor);
              organism.getFactorOfType(factor.factorType).addValue(valueMod);
              console.log("        ... after: " + factor);
            }
          }
        } else if (type === 'node') {
          _ref1 = this._organisms;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            organism = _ref1[_k];
            nodes = getRandomElements(organism.getNodes(), num);
            for (_l = 0, _len3 = nodes.length; _l < _len3; _l++) {
              node = nodes[_l];
              valType = typeof argVal;
              if (valType === 'integer') {
                valueMod = argVal;
              } else if (valType === 'array') {
                valueMod = Math.randomRange(argVal[1], argVal[0]);
              } else if (valType === 'string' && argVal === 'rand') {
                valueMod = Math.randomRange(50, -50);
              }
              cell = getRandomElements(node.getCells(), 1)[0];
              console.log("    --> influence: node " + node.nodeId + "->" + cell.factorType + " by " + valueMod);
              console.log("        ... before: " + node);
              cell.addFactorValue(valueMod);
              console.log("        ... after: " + node);
            }
          }
        }
      }
      return console.log("---");
    };

    return Environment;

  })();

  window.Environment = Environment;

  $(window).ready(function() {
    var environment;
    environment = new Environment;
    return window.environment = environment;
  });

  /*
  	Interpreter
  */


  Interpreter = (function() {

    function Interpreter(sourceAdapters) {
      this.sourceAdapters = sourceAdapters;
    }

    Interpreter.prototype.addSourceAdapter = function(sourceAdapter) {};

    Interpreter.prototype.startListenToSources = function() {};

    return Interpreter;

  })();

  window.Interpreter = Interpreter;

  /*
  Organism
  */


  Organism = (function() {

    Organism.NUM_FACTORS = 5;

    Organism.NUM_SOUNDS = 1;

    Organism.TIME_INTERVAL = 3000;

    /*
    	Constructor
    */


    function Organism() {
      var factorValue, i;
      this._factorValues = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Organism.NUM_FACTORS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(0.01 * Math.floor(Math.random() * 100));
        }
        return _results;
      })();
      this._factors = (function() {
        var _i, _len, _ref, _results;
        _ref = this._factorValues;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          factorValue = _ref[i];
          _results.push(new Factor(i, factorValue));
        }
        return _results;
      }).call(this);
      this._sounds = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Organism.NUM_SOUNDS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Sound);
        }
        return _results;
      })();
      console.log(this._factors, this._sounds);
      this.createGUI();
      this.state = {
        disharmony: 0,
        performedMutations: 0,
        iterations: 0
      };
      this.stateHistory = [];
      this.__isInTherapy = false;
      this.therapyLoop();
    }

    /*
    	Creates a (jQuery) GUI
    */


    Organism.prototype.createGUI = function() {
      var bucketsHtml, factor, factorEl, factorValue, i, j, sound, soundEl, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.$factors = $("#factors");
      this.$sounds = $("#sounds");
      this.$state = $("#organism-state");
      _ref = this._factors;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        factor = _ref[i];
        factorEl = $("<div class='factor' data-factor='" + i + "' data-factor-value='" + factor.factorValue + "'><span class='factor-value'>" + factor.factorValue + "</span></div>");
        factorEl.append(function() {
          return "<span class='factor-modifier' data-factor-modifier='5' data-factor-target='" + i + "'>+</span>					<span class='factor-modifier' data-factor-modifier='-5' data-factor-target='" + i + "'>-</span>";
        }).find(".factor-modifier").on("click", function(e) {
          var $factorParent, currentFactorValue, f, factorModifications, factorTarget;
          console.log("factor modifier clicked", e.target);
          factorTarget = parseInt($(e.target).attr("data-factor-target"));
          factorModifications = (function() {
            var _j, _ref1, _results;
            _results = [];
            for (f = _j = 1, _ref1 = this._factors.length; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; f = 1 <= _ref1 ? ++_j : --_j) {
              _results.push(0);
            }
            return _results;
          }).call(_this);
          factorModifications[factorTarget] = parseInt($(e.target).attr("data-factor-modifier"));
          $factorParent = $(e.target).parent();
          currentFactorValue = parseInt($factorParent.attr("data-factor-value"));
          $factorParent.attr("data-factor-value", currentFactorValue + factorModifications[factorTarget]);
          $factorParent.find(".factor-value").html($factorParent.attr("data-factor-value"));
          return _this.perceive(factorModifications);
        }).end().appendTo(this.$factors);
        factor.$factorEl = factorEl;
      }
      _ref1 = this._sounds;
      for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
        sound = _ref1[j];
        bucketsHtml = (function() {
          var _k, _len2, _ref2, _results;
          _ref2 = sound.getBucketValues();
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            factorValue = _ref2[_k];
            _results.push("<li>" + factorValue + "</li>");
          }
          return _results;
        })();
        soundEl = $("<div class='sound' data-sound='" + sound.soundId + "' data-buckets='" + (JSON.toString(sound.getBucketValues())) + "'></div>").html("<ul class='sound-buckets'>" + (bucketsHtml.join("")) + "</ul>");
        soundEl.appendTo(this.$sounds);
        sound.$soundEl = soundEl;
      }
      $("a").on('click', function(e) {
        e.preventDefault();
        switch ($(e.target).attr("href")) {
          case "#start":
            return _this.startTherapy();
          case "#stop":
            return _this.stopTherapy();
        }
      });
      return google.setOnLoadCallback(function() {
        _this.$disharmonyChart = $("#disharmony-chart");
        _this.disharmonyChart = new google.visualization.LineChart(_this.$disharmonyChart.get(0));
        return $(document).on('updategui.dm', function() {
          return _this.drawCharts();
        });
      });
    };

    Organism.prototype.updateGUI = function() {
      var sound, _i, _len, _ref;
      _ref = this._sounds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sound = _ref[_i];
        sound.updateSoundEl();
      }
      this.$state.html("Total disharmony: " + this.state.disharmony + "<br />No. mutations: " + this.state.performedMutations);
      return $(document).trigger('updategui.dm');
    };

    Organism.prototype.drawCharts = function() {
      var data, disharmonyData, options;
      disharmonyData = this.stateHistory.slice(-300);
      disharmonyData.unshift(['Iteration', 'Disharmony']);
      data = google.visualization.arrayToDataTable(disharmonyData);
      options = {
        title: 'Disharmony chart',
        vAxis: {
          viewWindowMode: 'explicit',
          viewWindow: {
            min: 0
          }
        }
      };
      return this.disharmonyChart.draw(data, options);
    };

    Organism.prototype.perceive = function(factorModifications) {
      var currentBucketValue, i, modification, modifiedSound, valueDiff, _i, _j, _len, _len1;
      console.log("@perceive", factorModifications);
      for (i = _i = 0, _len = factorModifications.length; _i < _len; i = ++_i) {
        valueDiff = factorModifications[i];
        this._factors[i].modifyValue(valueDiff);
      }
      for (i = _j = 0, _len1 = factorModifications.length; _j < _len1; i = ++_j) {
        modification = factorModifications[i];
        if (modification > 0) {
          modifiedSound = (SoundAdvisor.selectSounds(this._sounds, 1))[0];
          modifiedSound.addBucketValue(i, modification);
          modifiedSound.updateSoundEl();
          console.log("modified sound", modifiedSound);
        } else if (modification < 0) {
          console.log("subtract:", modification);
          while (modification < 0) {
            modifiedSound = (SoundAdvisor.selectSounds(this._sounds, 1))[0];
            currentBucketValue = modifiedSound.getBucketValue(i);
            console.log("\tsubtracting from " + (modifiedSound.getString()) + ", current bucket:", currentBucketValue);
            if (currentBucketValue + modification >= 0) {
              modifiedSound.setBucketValue(i, currentBucketValue + modification);
              modification = 0;
              console.log("\t\t-> " + (modifiedSound.getString()) + " does the trick");
            } else {
              console.log("\t\tremove all from", modifiedSound.getString(), "(" + i + ") = " + (modifiedSound.getBucketValue(i)));
              modifiedSound.setBucketValue(i, 0);
              modification += currentBucketValue;
            }
            console.log("\t\t(modification left: " + modification + ")");
          }
        }
      }
      return this.updateGUI();
    };

    Organism.prototype.getTotalDisharmony = function() {
      var disharmonies, sound;
      disharmonies = (function() {
        var _i, _len, _ref, _results;
        _ref = this._sounds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sound = _ref[_i];
          _results.push(sound.getDisharmony());
        }
        return _results;
      }).call(this);
      this.state.disharmony = disharmonies.reduce(function(t, s) {
        return t + s;
      });
      return this.state.disharmony;
    };

    Organism.prototype.stopTherapy = function() {
      return this._isInTherapy = false;
    };

    Organism.prototype.startTherapy = function() {
      return this._isInTherapy = true;
    };

    Organism.prototype.therapyLoop = function() {
      var _this = this;
      return setInterval(function() {
        return _this.performTherapy();
      }, Organism.TIME_INTERVAL);
    };

    Organism.prototype.performTherapy = function() {
      var factor, _i, _len, _ref, _results;
      if (this._isInTherapy) {
        _ref = this._factors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          factor = _ref[_i];
          _results.push(HarmonyCalculator.calcFactorValueFromSounds(factor.factorType, this._sounds));
        }
        return _results;
      }
    };

    Organism.prototype.performTherapyzzz = function() {
      var actionInfo, actionNr, currSoundDiffs, currSoundDiffsValue, diff, potentialSoundDiffValues, potentialSoundDiffs, sound, soundsToCompare, _i, _len,
        _this = this;
      if (this._isInTherapy) {
        console.log("\n--- PERFORM THERAPY ---\n");
        soundsToCompare = SoundAdvisor.selectSounds(this._sounds, 2);
        $(".in-comparison").removeClass("in-comparison");
        for (_i = 0, _len = soundsToCompare.length; _i < _len; _i++) {
          sound = soundsToCompare[_i];
          sound.$soundEl.addClass("in-comparison");
        }
        currSoundDiffs = SoundAdvisor.getSoundDiffs(soundsToCompare);
        currSoundDiffsValue = SoundAdvisor.getTotalDiffsValue(currSoundDiffs);
        potentialSoundDiffs = SoundAdvisor.getPotentialSoundDiffs(soundsToCompare);
        potentialSoundDiffs.sort(function(a, b) {
          return a.diffValueSum > b.diffValueSum;
        });
        potentialSoundDiffValues = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = potentialSoundDiffs.length; _j < _len1; _j++) {
            diff = potentialSoundDiffs[_j];
            _results.push(diff.diffValueSum);
          }
          return _results;
        })();
        if (potentialSoundDiffs.length > 0) {
          console.log("-> Perform action", potentialSoundDiffs[0].actionKey, "on", soundsToCompare[0].getString(), "and", soundsToCompare[1].getString());
          actionInfo = potentialSoundDiffs[0].actionKey.split(":");
          console.log("\t\tAction info:", actionInfo);
          actionNr = parseInt(actionInfo[1], 10);
          switch (actionNr) {
            case 1:
              soundsToCompare[0].addBucketValue(actionInfo[0], -1);
              soundsToCompare[1].addBucketValue(actionInfo[0], 1);
              break;
            case 2:
              soundsToCompare[0].addBucketValue(actionInfo[0], 1);
              soundsToCompare[1].addBucketValue(actionInfo[0], -1);
              break;
            default:
              console.log("\t\t\tactionNr (" + actionNr + ") is neither 1 nor 2");
          }
          this.state.performedMutations++;
        } else {
          console.log("no action available");
        }
        this.state.iterations++;
        this.stateHistory.push([this.state.iterations, this.getTotalDisharmony()]);
        return this.updateGUI();
      }
    };

    return Organism;

  })();

  window.Organism = Organism;

  /*
  	Organism
  */


  Organism = (function() {

    Organism.NUM_FACTORS = 5;

    Organism.DEFAULT_NUM_NODES = 40;

    Organism.DISTRIBUTE_FACTOR_VALUES = false;

    Organism.STRESS_THRESHOLD_ENTER = 1;

    Organism.STRESS_THRESHOLD_LEAVE = 2;

    function Organism(numNodes) {
      var i,
        _this = this;
      if (numNodes == null) {
        numNodes = -1;
      }
      this._sumDisharmony = 0;
      this._actualDisharmony = 0;
      this._inStressMode = true;
      $('#stressmode').change(function(e) {
        return _this._inStressMode = $(e.currentTarget).attr('checked') === 'checked';
      });
      this._factors = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Organism.NUM_FACTORS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(Factor.createFactor(i, 0));
        }
        return _results;
      })();
      if (numNodes <= 0) {
        numNodes = Organism.DEFAULT_NUM_NODES;
      }
      this._createNodes(numNodes);
      this.disharmonyCalculator = new DisharmonyCalculator(this);
      this.disharmonyHistory = [];
      this._gui = new GUI;
    }

    Organism.prototype.getNode = function(nodeId) {
      if (this._nodes[nodeId] != null) {
        return this._nodes[nodeId];
      } else {
        return null;
      }
    };

    Organism.prototype.getNodesWithCellsOfFactorType = function(factorType) {
      return this._nodeCellIndex[factorType];
    };

    Organism.prototype.getNodes = function() {
      return this._nodes;
    };

    Organism.prototype.getFactors = function() {
      return this._factors;
    };

    Organism.prototype.getFactorOfType = function(factorType) {
      var factor, foundFactor, _i, _len, _ref;
      foundFactor = null;
      _ref = this._factors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        factor = _ref[_i];
        if (factor.factorType === factorType) {
          foundFactor = factor;
        }
      }
      return foundFactor;
    };

    Organism.prototype.performNodeComparison = function(numComparisons) {
      var comparisonMode, factor, i, nodes, _i, _j, _len, _ref;
      if (numComparisons == null) {
        numComparisons = 1;
      }
      console.log("#performNodeComparison, " + DisharmonyCalculator.NODE_COMPARISON_MODE_FACTOR_HARMONY);
      this.disharmonyCalculator.debug = true;
      for (i = _i = 1; 1 <= numComparisons ? _i <= numComparisons : _i >= numComparisons; i = 1 <= numComparisons ? ++_i : --_i) {
        nodes = this._getRandomNodes(2);
        comparisonMode = this._inStressMode && false ? DisharmonyCalculator.NODE_COMPARISON_MODE_FACTOR_HARMONY : DisharmonyCalculator.NODE_COMPARISON_MODE_ORGANISM_HARMONY;
        this.disharmonyCalculator.alterNodesInComparisonMode(nodes, comparisonMode);
      }
      this.disharmonyCalculator.debug = false;
      this._sumDisharmony = this.disharmonyCalculator.getSummedOrganismDisharmony(this);
      this._actualDisharmony = this.disharmonyCalculator.getActualOrganismDisharmony(this);
      this.disharmonyHistory.push([this.disharmonyHistory.length, this._sumDisharmony, this._actualDisharmony]);
      _ref = this._factors;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        factor = _ref[_j];
        factor.disharmony = this.disharmonyCalculator.getFactorDisharmonyForNodes(factor, this._nodes);
      }
      if (!this._inStressMode && this._actualDisharmony < Organism.STRESS_THRESHOLD_ENTER) {
        return this._inStressMode = true;
      } else if (this._inStressMode && this._actualDisharmony > Organism.STRESS_THRESHOLD_LEAVE) {
        return this._inStressMode = false;
      }
    };

    Organism.prototype.getDisharmonyHistoryData = function(numEntries) {
      if (numEntries == null) {
        numEntries = 300;
      }
      if (numEntries > 0) {
        return this.disharmonyHistory.slice(-numEntries);
      } else {
        return this.disharmonyHistory.slice(-this.disharmonyHistory.length);
      }
    };

    Organism.prototype._createNodes = function(numNodes) {
      var cell, factor, i, node, nodes, nodesWithFactorCells, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _results, _results1;
      this._nodeCellIndex = [];
      _ref = this._factors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        factor = _ref[_i];
        this._nodeCellIndex[factor.factorType] = [];
      }
      nodes = (function() {
        var _j, _results;
        _results = [];
        for (i = _j = 1; 1 <= numNodes ? _j <= numNodes : _j >= numNodes; i = 1 <= numNodes ? ++_j : --_j) {
          _results.push(new Node());
        }
        return _results;
      })();
      this._nodes = [];
      for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
        node = nodes[_j];
        this._nodes[node.nodeId] = node;
      }
      for (_k = 0, _len2 = nodes.length; _k < _len2; _k++) {
        node = nodes[_k];
        _ref1 = node.getCells();
        for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
          cell = _ref1[_l];
          this._nodeCellIndex[cell.factorType].push(node);
        }
      }
      if (Organism.DISTRIBUTE_FACTOR_VALUES) {
        _ref2 = this._factors;
        _results = [];
        for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
          factor = _ref2[_m];
          nodesWithFactorCells = this.getNodesWithCellsOfFactorType(factor.factorType);
          _results.push((function() {
            var _n, _ref3, _results1;
            _results1 = [];
            for (i = _n = 1, _ref3 = factor.factorValue; 1 <= _ref3 ? _n <= _ref3 : _n >= _ref3; i = 1 <= _ref3 ? ++_n : --_n) {
              _results1.push(getRandomElements(nodesWithFactorCells, 1)[0].addCellValue(factor.factorType, 1));
            }
            return _results1;
          })());
        }
        return _results;
      } else {
        _results1 = [];
        for (_n = 0, _len5 = nodes.length; _n < _len5; _n++) {
          node = nodes[_n];
          _results1.push((function() {
            var _len6, _o, _ref3, _results2;
            _ref3 = node.getCells();
            _results2 = [];
            for (_o = 0, _len6 = _ref3.length; _o < _len6; _o++) {
              cell = _ref3[_o];
              _results2.push(cell.factorValue = Math.randomRange(0, 100));
            }
            return _results2;
          })());
        }
        return _results1;
      }
    };

    Organism.prototype._getRandomNodes = function(numNodes) {
      var allNodeIndexes, i, nodeIndexes, _i, _j, _len, _ref, _results, _results1;
      allNodeIndexes = (function() {
        _results = [];
        for (var _i = 0, _ref = this._nodes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      nodeIndexes = (function() {
        var _j, _results1;
        _results1 = [];
        for (i = _j = 1; 1 <= numNodes ? _j <= numNodes : _j >= numNodes; i = 1 <= numNodes ? ++_j : --_j) {
          _results1.push(allNodeIndexes.splice(Math.floor(Math.random() * allNodeIndexes.length), 1));
        }
        return _results1;
      })();
      _results1 = [];
      for (_j = 0, _len = nodeIndexes.length; _j < _len; _j++) {
        i = nodeIndexes[_j];
        _results1.push(this._nodes[i]);
      }
      return _results1;
    };

    Organism.prototype._getRandomNodesOfFactorType = function(factorType, numNodes) {
      return getRandomElements(this._nodeCellIndex[factorType], numNodes);
    };

    return Organism;

  })();

  window.Organism = Organism;

  pushMany = function(arr, objects) {
    var obj, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      obj = objects[_i];
      _results.push(arr.push(obj));
    }
    return _results;
  };

  window.pushMany = pushMany;

  getRandomElements = function(arr, numElements) {
    var copy, elements, i, obj;
    console.log("#getRandomElements", arr, numElements);
    copy = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        obj = arr[_i];
        _results.push(obj);
      }
      return _results;
    })();
    return elements = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= numElements ? _i <= numElements : _i >= numElements; i = 1 <= numElements ? ++_i : --_i) {
        _results.push(copy.splice(Math.floor(Math.random() * copy.length), 1)[0]);
      }
      return _results;
    })();
  };

  window.getRandomElements = getRandomElements;

  window.Math.randomRange = function(max, min) {
    if (max == null) {
      max = null;
    }
    if (min == null) {
      min = null;
    }
    if (!(max != null) && !(min != null)) {
      return Math.random();
    }
    if (min == null) {
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  window.clone = function(obj) {
    var flags, key, newInstance;
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = obj[key];
    }
    return newInstance;
  };

  window.clone = clone;

  AgreeablenessFactor = (function(_super) {

    __extends(AgreeablenessFactor, _super);

    function AgreeablenessFactor() {
      AgreeablenessFactor.__super__.constructor.call(this, Factor.TYPE_AGREEABLENESS, 30);
    }

    return AgreeablenessFactor;

  })(Factor);

  window.AgreeablenessFactor = AgreeablenessFactor;

  ConscientiousnessFactor = (function(_super) {

    __extends(ConscientiousnessFactor, _super);

    function ConscientiousnessFactor() {
      ConscientiousnessFactor.__super__.constructor.call(this, Factor.TYPE_CONSCIENTIOUSNESS, 70);
    }

    return ConscientiousnessFactor;

  })(Factor);

  window.ConscientiousnessFactor = ConscientiousnessFactor;

  ExtraversionFactor = (function(_super) {

    __extends(ExtraversionFactor, _super);

    function ExtraversionFactor() {
      ExtraversionFactor.__super__.constructor.call(this, Factor.TYPE_EXTRAVERSION, 50);
    }

    return ExtraversionFactor;

  })(Factor);

  window.ExtraversionFactor = ExtraversionFactor;

  /*
  	Factor
  */


  Factor = (function() {

    Factor.TYPE_UNKNOWN = 0;

    Factor.TYPE_OPENNESS = 1;

    Factor.TYPE_CONSCIENTIOUSNESS = 2;

    Factor.TYPE_EXTRAVERSION = 3;

    Factor.TYPE_AGREEABLENESS = 4;

    Factor.TYPE_NEUROTICISM = 5;

    Factor.FACTOR_CORRELATIONS = {
      '1': {
        '2': -15,
        '3': 25
      },
      '2': {
        '3': 30
      },
      '3': {
        '4': 50
      },
      '4': {
        '5': -20
      }
    };

    Factor.createFactor = function(factorType, factorValue) {
      if (factorValue == null) {
        factorValue = 0;
      }
      switch (factorType) {
        case Factor.TYPE_OPENNESS:
          return new OpennessFactor();
        case Factor.TYPE_CONSCIENTIOUSNESS:
          return new ConscientiousnessFactor();
        case Factor.TYPE_EXTRAVERSION:
          return new ExtraversionFactor();
        case Factor.TYPE_AGREEABLENESS:
          return new AgreeablenessFactor();
        case Factor.TYPE_NEUROTICISM:
          return new NeuroticismFactor();
        default:
          return null;
      }
    };

    function Factor(factorType, factorValue) {
      this.factorType = factorType;
      this.factorValue = factorValue != null ? factorValue : 0;
      this.name = this.constructor.name.replace(/^(\w+)Factor$/, "$1");
      this.disharmony = 0;
      this.relativeDisharmony = [];
    }

    Factor.prototype.addValue = function(value) {
      this.factorValue += value;
      if (this.factorValue < 0) {
        this.factorValue = 0;
      }
      if (this.factorValue > 100) {
        return this.factorValue = 100;
      }
    };

    Factor.prototype.toString = function() {
      return "<Factor #" + this.factorType + " (" + this.name + "); factorValue = " + this.factorValue + ">";
    };

    return Factor;

  })();

  window.Factor = Factor;

  NeuroticismFactor = (function(_super) {

    __extends(NeuroticismFactor, _super);

    function NeuroticismFactor() {
      NeuroticismFactor.__super__.constructor.call(this, Factor.TYPE_NEUROTICISM, 10);
    }

    return NeuroticismFactor;

  })(Factor);

  window.NeuroticismFactor = NeuroticismFactor;

  OpennessFactor = (function(_super) {

    __extends(OpennessFactor, _super);

    function OpennessFactor() {
      OpennessFactor.__super__.constructor.call(this, Factor.TYPE_OPENNESS, 90);
    }

    return OpennessFactor;

  })(Factor);

  window.OpennessFactor = OpennessFactor;

  /*
  	GUI super class
  */


  GUI = (function() {

    function GUI() {
      var _this = this;
      this.$factorsWrap = $('#factors');
      this.$nodesWrap = $('#nodes');
      this._renderedFactors = false;
      this._renderedNodes = false;
      this._setupControls();
      if (typeof google !== "undefined" && google !== null) {
        google.setOnLoadCallback(function() {
          _this.$disharmonyChart = $("#disharmony-chart");
          return _this.disharmonyChart = new google.visualization.LineChart(_this.$disharmonyChart.get(0));
        });
      }
    }

    GUI.prototype._setupControls = function() {
      var _this = this;
      return $('#controls .btn').click(function(e) {
        return $(document).trigger("dm" + ($(e.currentTarget).attr('href').replace("#", "")));
      });
    };

    GUI.prototype.update = function(factors, nodes, tableData) {
      this._updateFactors(factors);
      this._updateNodes(nodes);
      return this._drawCharts(tableData);
    };

    GUI.prototype._drawCharts = function(tableData) {
      var data, options;
      if (!(this.disharmonyChart != null)) {
        return;
      }
      tableData.unshift(['Iteration', 'Sum dish.', 'Actual dish.']);
      data = google.visualization.arrayToDataTable(tableData);
      options = {
        title: 'Disharmony chart',
        vAxis: {
          viewWindowMode: 'explicit',
          viewWindow: {
            min: 0
          }
        }
      };
      return this.disharmonyChart.draw(data, options);
    };

    GUI.prototype._updateFactors = function(factors) {
      var factor, _i, _len, _results;
      if (!this._renderedFactors) {
        return this._buildFactors(factors);
      } else {
        _results = [];
        for (_i = 0, _len = factors.length; _i < _len; _i++) {
          factor = factors[_i];
          _results.push($(".factor[data-factor-type='" + factor.factorType + "']").attr('data-factor-disharmony', factor.disharmony).attr('data-factor-name', factor.name).find('.factor-value').html(factor.factorValue));
        }
        return _results;
      }
    };

    GUI.prototype._buildFactors = function(factors) {
      var factor, factorsHtml;
      factorsHtml = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = factors.length; _i < _len; _i++) {
          factor = factors[_i];
          _results.push("<div class=\"factor\" data-factor-type=\"" + factor.factorType + "\"><span class=\"factor-name\">" + factor.name + "</span> <span class=\"factor-value\">" + factor.factorValue + "</span></div>");
        }
        return _results;
      })()).join("");
      this.$factorsWrap.html(factorsHtml);
      return this._renderedFactors = true;
    };

    GUI.prototype._updateNodes = function(nodes) {
      var $node, cell, node, _i, _len, _results;
      if (!this._renderedNodes) {
        return this._buildNodes(nodes);
      } else {
        _results = [];
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          $node = this.$nodesWrap.find(".node[data-node-id=" + node.nodeId + "]");
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = node.getCells();
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              cell = _ref[_j];
              _results1.push($node.find(".node-cell[data-cell-factor='" + cell.factorType + "']").html(cell.factorValue));
            }
            return _results1;
          })());
        }
        return _results;
      }
    };

    GUI.prototype._buildNodes = function(nodes) {
      var cell, cellsHtml, node, nodeHtml, _i, _len;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        cellsHtml = ((function() {
          var _j, _len1, _ref, _results;
          _ref = node.getCells();
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            cell = _ref[_j];
            _results.push("<li class=\"node-cell\" data-cell-factor=\"" + cell.factorType + "\">" + cell.factorValue + "</li>");
          }
          return _results;
        })()).join("");
        cellsHtml = "<ul class=\"node-cells\">" + cellsHtml + "</ul>";
        nodeHtml = "<div class=\"node\" data-node-id=\"" + node.nodeId + "\">" + cellsHtml + "</div>";
        this.$nodesWrap.append(nodeHtml);
      }
      return this._renderedNodes = true;
    };

    return GUI;

  })();

  window.GUI = GUI;

  /*
  Sound
  */


  Sound = (function() {

    Sound._idCounter = 0;

    Sound.NUM_BUCKETS = 2;

    Sound.clone = function(sound) {
      var soundCopy;
      soundCopy = new Sound(sound.getBucketValues(false));
      soundCopy.soundId = sound.soundId;
      Sound._idCounter--;
      soundCopy.$soundEl = sound.$soundEl.clone(true);
      return soundCopy;
    };

    function Sound() {
      var i;
      this.soundId = Sound._idCounter++;
      this._factorBuckets = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Sound.NUM_BUCKETS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new FactorBucket(Math.floor(Math.random() * 2) + 1, Math.round(Math.random() * 100)));
        }
        return _results;
      })();
      console.log("... factor buckets", this._factorBuckets, FactorBucket, Sound.NUM_BUCKETS);
    }

    Sound.prototype.getBuckets = function() {
      return this._factorBuckets;
    };

    Sound.prototype.getBucketValue = function(index) {
      if ((0 <= index && index < this._factorBuckets.length)) {
        return this._factorBuckets[index].factorValue;
      } else {
        return -1;
      }
    };

    Sound.prototype.setBucketValue = function(index, value) {
      if ((0 <= index && index < this._factorBuckets.length)) {
        return this._factorBuckets[index].factorValue = value;
      }
    };

    Sound.prototype.addBucketValue = function(index, addValue) {
      return this.setBucketValue(index, this.getBucketValue(index) + addValue);
    };

    Sound.prototype.getBucketValues = function(asString) {
      var bucketValues, factorBucket;
      if (asString == null) {
        asString = false;
      }
      bucketValues = (function() {
        var _i, _len, _ref, _results;
        _ref = this._factorBuckets;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          factorBucket = _ref[_i];
          _results.push(factorBucket.factorValue);
        }
        return _results;
      }).call(this);
      console.log("#getBucketValues", bucketValues);
      if (asString) {
        return bucketValues.join(" ");
      } else {
        return bucketValues;
      }
    };

    Sound.prototype.getString = function() {
      return "#" + this.soundId + " {" + (this.getBucketValues(true)) + "}";
    };

    Sound.prototype.updateSoundEl = function() {
      var _this = this;
      return setTimeout(function() {
        var bucket, rgbaArr, rgbaStr, soundListHtml, val;
        soundListHtml = ((function() {
          var _i, _len, _ref, _results;
          _ref = this._factorBuckets;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bucket = _ref[_i];
            _results.push("<li>" + bucket.factorValue + "</li>");
          }
          return _results;
        }).call(_this)).join("");
        _this.$soundEl.find('.sound-buckets').html(soundListHtml);
        rgbaArr = (function() {
          var _i, _len, _ref, _results;
          _ref = this.getBucketValues(false).slice(0, 4);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            val = _ref[_i];
            _results.push(val * 25);
          }
          return _results;
        }).call(_this);
        rgbaStr = rgbaArr.join(",");
        return _this.$soundEl.css("background-color", "rgba(" + rgbaStr + ")");
      }, Organism.TIME_INTERVAL / 2);
    };

    return Sound;

  })();

  window.Sound = Sound;

  /*
  	An organism node.
  */


  Node = (function() {

    Node._idCounter = 0;

    Node.NUM_CELLS = 2;

    Node.prototype.clone = function() {
      var cell, key, newNode;
      newNode = new Node;
      Node._idCounter--;
      for (key in this) {
        newNode[key] = this[key];
      }
      newNode._cells = (function() {
        var _i, _len, _ref, _results;
        _ref = newNode._cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          _results.push(cell.clone());
        }
        return _results;
      })();
      return newNode;
    };

    function Node() {
      var factorIndexes, i, _i, _ref, _results;
      this.nodeId = Node._idCounter++;
      factorIndexes = (function() {
        _results = [];
        for (var _i = 1, _ref = Organism.NUM_FACTORS; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      this._cells = (function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (i = _j = 1, _ref1 = Node.NUM_CELLS; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          _results1.push(new NodeCell(factorIndexes.splice(Math.floor(Math.random() * factorIndexes.length), 1)[0], 0));
        }
        return _results1;
      })();
      this._cells.sort(function(a, b) {
        return a.factorType > b.factorType;
      });
    }

    Node.prototype.getCells = function() {
      return this._cells;
    };

    Node.prototype.getCell = function(factorType) {
      wantedCell;

      var cell, wantedCell, _i, _len, _ref;
      _ref = this._cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        if (cell.factorType === factorType) {
          wantedCell = cell;
          break;
        }
      }
      return wantedCell;
    };

    Node.prototype.hasCellOfFactorType = function(factorType) {
      var cell, hasCell, _i, _len, _ref;
      hasCell = false;
      _ref = this._cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        hasCell = hasCell || cell.factorType === factorType;
      }
      return hasCell;
    };

    Node.prototype.getCellValue = function(factorType) {
      var cell;
      cell = this.getCell(factorType);
      if (cell) {
        return cell.factorValue;
      } else {
        return 0;
      }
    };

    Node.prototype.setCellValue = function(factorType, value) {
      var cell;
      cell = this.getCell(factorType);
      cell.factorValue = value;
      if (this.factorValue < 0) {
        cell.factorValue = 0;
      }
      if (this.factorValue > 100) {
        return cell.factorValue = 100;
      }
    };

    Node.prototype.addCellValue = function(factorType, addValue) {
      return this.setCellValue(factorType, this.getCellValue(factorType) + addValue);
    };

    Node.prototype.getCellValues = function(asString) {
      var cell, cellValues;
      if (asString == null) {
        asString = false;
      }
      cellValues = (function() {
        var _i, _len, _ref, _results;
        _ref = this._cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          _results.push(cell.factorValue);
        }
        return _results;
      }).call(this);
      if (asString) {
        return cellValues.join(" ");
      } else {
        return cellValues;
      }
    };

    Node.prototype.getString = function() {
      return "#" + this.nodeId + " {" + (this.getCellValues(true)) + "}";
    };

    Node.prototype.toString = function() {
      return this.getString();
    };

    return Node;

  })();

  window.Node = Node;

  /*
  FactorBucket
  */


  FactorBucket = (function() {

    function FactorBucket(factorType, factorValue) {
      console.log("FactorBucket", factorType, factorValue);
      this.factorType = factorType;
      this.factorValue = factorValue;
    }

    return FactorBucket;

  })();

  window.FactorBucket = FactorBucket;

  /*
  	A node cell
  */


  NodeCell = (function() {

    NodeCell.prototype.clone = function() {
      return new NodeCell(this.factorType, this.factorValue);
    };

    function NodeCell(factorType, factorValue) {
      this.factorType = factorType;
      this.factorValue = factorValue;
    }

    NodeCell.prototype.addFactorValue = function(value) {
      this.factorValue += value;
      if (this.factorValue < 0) {
        this.factorValue = 0;
      }
      if (this.factorValue > 100) {
        return this.factorValue = 100;
      }
    };

    return NodeCell;

  })();

  window.NodeCell = NodeCell;

  /*
  	Listens for mouse actions and adapts them into data interpretable
  	by the environment.
  */


  MouseSourceAdapter = (function() {

    function MouseSourceAdapter() {}

    MouseSourceAdapter.prototype.activate = function() {};

    MouseSourceAdapter.prototype.adaptSourceData = function() {};

    return MouseSourceAdapter;

  })();

  window.MouseSourceAdapter = MouseSourceAdapter;

  /*
  	Alters the factor and/or node values randomly
  */


  RandomSourceAdapter = (function(_super) {

    __extends(RandomSourceAdapter, _super);

    RandomSourceAdapter.TIME_INTERVAL_ALTER_FACTORS = 500;

    RandomSourceAdapter.PROBABILITY_ALTER_FACTORS = 0.1;

    RandomSourceAdapter.TIME_INTERVAL_ALTER_NODES = 500;

    RandomSourceAdapter.PROBABILITY_ALTER_NODES = 0.2;

    function RandomSourceAdapter(listener) {
      this.listener = listener;
      RandomSourceAdapter.__super__.constructor.call(this, this.listener);
    }

    RandomSourceAdapter.prototype.activate = function() {
      var _this = this;
      setInterval(function() {
        return _this.tryAlterFactors();
      }, RandomSourceAdapter.TIME_INTERVAL_ALTER_FACTORS);
      return setInterval(function() {
        return _this.tryAlterNodes();
      }, RandomSourceAdapter.TIME_INTERVAL_ALTER_NODES);
    };

    RandomSourceAdapter.prototype.getAdaptedSourceData = function(sourceData) {
      return sourceData;
    };

    RandomSourceAdapter.prototype.tryAlterFactors = function() {
      if (Math.floor((Math.random() + 1) / RandomSourceAdapter.PROBABILITY_ALTER_FACTORS) === 1) {
        return this.triggerInfluence({
          'random': {
            'object': 'factor',
            'num': 1,
            'valueModifier': 'rand'
          }
        });
      }
    };

    RandomSourceAdapter.prototype.tryAlterNodes = function() {
      if (Math.randomRange(Math.round(1 / RandomSourceAdapter.PROBABILITY_ALTER_NODES)) === 1) {
        return this.triggerInfluence({
          'random': {
            'object': 'node',
            'num': 'rand',
            'valueModifier': 'rand'
          }
        });
      }
    };

    return RandomSourceAdapter;

  })(SourceAdapter);

  window.RandomSourceAdapter = RandomSourceAdapter;

  /*
  	Source adapter super class.
  
  	A source adapater listens to any type of outer data feed
  	and adapts it to data interpretable to the environment.
  */


  SourceAdapter = (function() {

    function SourceAdapter(listener) {
      this.listener = listener;
    }

    SourceAdapter.prototype.activate = function() {};

    SourceAdapter.prototype.getAdaptedSourceData = function(sourceData) {
      var influenceData;
      return influenceData = {
        'factors': [
          {
            'factor': null,
            'valueModifier': null
          }
        ],
        'nodes': [
          {
            'node': null,
            'factorType': null,
            'valueModifier': 0
          }
        ],
        'random': [
          {
            'object': 'node',
            'num': [0, 1],
            'valueModifier': [0, 1]
          }
        ]
      };
    };

    SourceAdapter.prototype.triggerInfluence = function(influenceData) {
      if (this.listener.influence != null) {
        return this.listener.influence(influenceData);
      }
    };

    return SourceAdapter;

  })();

  window.SourceAdapter = SourceAdapter;

}).call(this);
