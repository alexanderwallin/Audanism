// Generated by CoffeeScript 1.4.0

/*
Sound
*/


(function() {
  var Sound;

  Sound = (function() {

    Sound._idCounter = 0;

    Sound.NUM_BUCKETS = 2;

    Sound.clone = function(sound) {
      var soundCopy;
      soundCopy = new Sound(sound.getBucketValues(false));
      soundCopy.soundId = sound.soundId;
      Sound._idCounter--;
      soundCopy.$soundEl = sound.$soundEl.clone(true);
      return soundCopy;
    };

    function Sound() {
      var i;
      this.soundId = Sound._idCounter++;
      this._factorBuckets = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Sound.NUM_BUCKETS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new FactorBucket(Math.floor(Math.random() * 2) + 1, Math.round(Math.random() * 100)));
        }
        return _results;
      })();
      console.log("... factor buckets", this._factorBuckets, FactorBucket, Sound.NUM_BUCKETS);
    }

    Sound.prototype.getBuckets = function() {
      return this._factorBuckets;
    };

    Sound.prototype.getBucketValue = function(index) {
      if ((0 <= index && index < this._factorBuckets.length)) {
        return this._factorBuckets[index].factorValue;
      } else {
        return -1;
      }
    };

    Sound.prototype.setBucketValue = function(index, value) {
      if ((0 <= index && index < this._factorBuckets.length)) {
        return this._factorBuckets[index].factorValue = value;
      }
    };

    Sound.prototype.addBucketValue = function(index, addValue) {
      return this.setBucketValue(index, this.getBucketValue(index) + addValue);
    };

    Sound.prototype.getBucketValues = function(asString) {
      var bucketValues, factorBucket;
      if (asString == null) {
        asString = false;
      }
      bucketValues = (function() {
        var _i, _len, _ref, _results;
        _ref = this._factorBuckets;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          factorBucket = _ref[_i];
          _results.push(factorBucket.factorValue);
        }
        return _results;
      }).call(this);
      console.log("#getBucketValues", bucketValues);
      if (asString) {
        return bucketValues.join(" ");
      } else {
        return bucketValues;
      }
    };

    Sound.prototype.getString = function() {
      return "#" + this.soundId + " {" + (this.getBucketValues(true)) + "}";
    };

    Sound.prototype.updateSoundEl = function() {
      var _this = this;
      return setTimeout(function() {
        var bucket, rgbaArr, rgbaStr, soundListHtml, val;
        soundListHtml = ((function() {
          var _i, _len, _ref, _results;
          _ref = this._factorBuckets;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bucket = _ref[_i];
            _results.push("<li>" + bucket.factorValue + "</li>");
          }
          return _results;
        }).call(_this)).join("");
        _this.$soundEl.find('.sound-buckets').html(soundListHtml);
        rgbaArr = (function() {
          var _i, _len, _ref, _results;
          _ref = this.getBucketValues(false).slice(0, 4);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            val = _ref[_i];
            _results.push(val * 25);
          }
          return _results;
        }).call(_this);
        rgbaStr = rgbaArr.join(",");
        return _this.$soundEl.css("background-color", "rgba(" + rgbaStr + ")");
      }, Organism.TIME_INTERVAL / 2);
    };

    return Sound;

  })();

  window.Sound = Sound;

}).call(this);
