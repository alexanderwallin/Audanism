// Generated by CoffeeScript 1.4.0

/*
	Synth2
*/


(function() {
  var Synth2;

  Synth2 = (function() {

    function Synth2(freq) {
      var SynthObj;
      console.log('new Synth', freq);
      this.freq = freq;
      this.audiolet = new Audiolet();
      SynthObj = function(audiolet) {
        var envEnd;
        AudioletGroup.apply(this, [audiolet, 0, 1]);
        this.saw = new Saw(audiolet, 500);
        this.frequencyLFO = new Sine(audiolet, 2);
        this.frequencyMA = new MulAdd(audiolet, 10, 100);
        this.filter = new LowPassFilter(audiolet, 1000);
        this.filterLFO = new Sine(audiolet, 8);
        this.filterMA = new MulAdd(audiolet, 900, 1000);
        envEnd = function() {
          console.log('envelope end', this);
          return this.audiolet.scheduler.addRelative(0, this.remove.bind(this));
        };
        envEnd.bind(this);
        this.gain = new Gain(audiolet);
        this.gain.gain.setValue(0);
        this.env = new ADSREnvelope(audiolet, 0, .1, 0.2, 0.9, 0.5);
        this.saw.connect(this.filter);
        this.filter.connect(this.gain);
        this.gain.connect(this.outputs[0]);
        this.frequencyLFO.connect(this.frequencyMA);
        this.frequencyMA.connect(this.saw);
        this.filterLFO.connect(this.filterMA);
        this.filterMA.connect(this.filter, 0, 1);
        return this.env.connect(this.gain, 0, 1);
      };
      extend(SynthObj, AudioletGroup);
      this.synth = new SynthObj(this.audiolet);
      this.synth.connect(this.audiolet.output);
    }

    Synth2.prototype.hit = function() {
      var callback, filterLFOPattern, frequencyPattern, gatePattern, patterns,
        _this = this;
      console.log('--> hit!');
      frequencyPattern = new PSequence([55, 98], 2);
      filterLFOPattern = new PChoose([2, 4], 2);
      gatePattern = new PSequence([1, 0], 2);
      patterns = [frequencyPattern, filterLFOPattern, gatePattern];
      callback = function(frequency, filterLFOFrequency, gate) {
        console.log('callback', _this, frequency, filterLFOFrequency, gate);
        _this.synth.frequencyMA.add.setValue(frequency);
        _this.synth.filterLFO.frequency.setValue(filterLFOFrequency);
        return _this.synth.env.gate.setValue(gate);
      };
      return this.audiolet.scheduler.play(patterns, 2, callback);
    };

    return Synth2;

  })();

  Audanism.Sound.Synth2 = Synth2;

}).call(this);
