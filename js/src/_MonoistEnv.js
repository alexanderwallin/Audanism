// Generated by CoffeeScript 1.4.0

/*
	MonoistEnv synth - sine with an envelope
*/


(function() {
  var MonoistEnv,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MonoistEnv = (function(_super) {

    __extends(MonoistEnv, _super);

    function MonoistEnv() {
      this.note = randomInt(40, 80);
      this.noteIsOn = false;
      this.volNode = Audanism.Audio.audioContext.createGain();
      this.volNode.gain.value = 0.25;
      this.volNode.connect(Audanism.Audio.audioContext.destination);
      this.compressor = Audanism.Audio.audioContext.createDynamicsCompressor();
      this.compressor.connect(this.volNode);
      this.panner = Audanism.Audio.audioContext.createPanner();
      this.panner.setPosition(1 - Math.random() * 2, 0, 0);
      this.panner.connect(this.compressor);
      this.asdr = new Audanism.Audio.Module.ASDR(0.5, 1, 10, 0.1);
      this.envelope = Audanism.Audio.audioContext.createGain();
      this.envelope.gain.setValueAtTime(0, 0);
      this.envelope.connect(this.panner);
      this.osc = Audanism.Audio.audioContext.createOscillator();
      this.osc.frequency.value = Audanism.Audio.Harmonizer.getFreqFromNote(this.note);
      this.osc.connect(this.envelope);
      this.osc.start(0);
    }

    MonoistEnv.prototype.noteOn = function(note) {
      var attackEndTime, now;
      now = Audanism.Audio.audioContext.currentTime;
      attackEndTime = now + this.asdr.attack;
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);
      this.envelope.gain.linearRampToValueAtTime(1, attackEndTime);
      this.envelope.gain.setTargetAtTime(this.asdr.sustain / 100, attackEndTime, (this.asdr.decay / 100) + 0.001);
      return this.noteIsOn = true;
    };

    MonoistEnv.prototype.noteOff = function() {
      var now, releaseTime;
      now = Audanism.Audio.audioContext.currentTime;
      releaseTime = now + this.asdr.release;
      console.log(now);
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);
      this.envelope.gain.linearRampToValueAtTime(0, releaseTime);
      return this.noteIsOn = false;
    };

    return MonoistEnv;

  })(Audanism.Audio.Synthesizer.Voice);

  window.Audanism.Audio.Synthesizer.MonoistEnv = MonoistEnv;

}).call(this);
