// Generated by CoffeeScript 1.4.0

/*
	Environment
*/


(function() {
  var Environment,
    _this = this;

  Environment = (function() {

    Environment.NUM_ORGANISMS = 1;

    Environment.TIME_INTERVAL = 200;

    function Environment() {
      var i, organism, _i, _len, _ref;
      this._iterationCount = 0;
      this._isRunning = true;
      this._isSingleStep = true;
      this._organisms = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Environment.NUM_ORGANISMS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Organism);
        }
        return _results;
      })();
      $(document).trigger('audanism/init/organism', [this._organisms[0]]);
      this._gui = new GUI;
      _ref = this._organisms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        organism = _ref[_i];
        this._gui.update(organism.getFactors(), organism.getNodes(), organism.getDisharmonyHistoryData(200));
      }
      this.listenToControls();
      this.createInfluenceSources();
      this.initConductor();
      this.run();
    }

    Environment.prototype.run = function() {
      var _this = this;
      this._intervalId = setInterval(function() {
        return _this.handleIteration();
      }, Environment.TIME_INTERVAL);
      return this.handleIteration();
    };

    Environment.prototype.start = function() {
      return this._isRunning = true;
    };

    Environment.prototype.pause = function() {
      return this._isRunning = false;
    };

    Environment.prototype.stop = function() {
      this._isRunning = false;
      return clearInterval(this._intervalId);
    };

    Environment.prototype.step = function() {
      return this._isSingleStep = true;
    };

    Environment.prototype.listenToControls = function() {
      var _this = this;
      $(document).on('dmstart', function(e) {
        return _this.start();
      });
      $(document).on('dmpause', function(e) {
        return _this.pause();
      });
      $(document).on('dmstop', function(e) {
        return _this.stop();
      });
      return $(document).on('dmstep', function(e) {
        return _this.step();
      });
    };

    Environment.prototype.handleIteration = function() {
      var organism, _i, _len, _ref, _results;
      this._iterationCount++;
      if (this._isRunning || this._isSingleStep) {
        this.conductor.unmute();
        _ref = this._organisms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          organism = _ref[_i];
          organism.performNodeComparison();
          this.updateConductor();
          this._gui.update(organism.getFactors(), organism.getNodes(), organism.getDisharmonyHistoryData(200));
          _results.push(this._isSingleStep = false);
        }
        return _results;
      } else {
        return this.conductor.mute();
      }
    };

    Environment.prototype.createInfluenceSources = function() {
      var sourceAdapter, _i, _len, _ref, _results;
      this._influenceSources = [];
      this._influenceSources.push(new InstagramSourceAdapter(this));
      _ref = this._influenceSources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sourceAdapter = _ref[_i];
        _results.push(sourceAdapter.activate());
      }
      return _results;
    };

    Environment.prototype.influence = function(influenceData) {
      var $node, argNum, argVal, cell, factor, factors, node, nodes, num, numType, organism, type, valType, valueMod, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2,
        _this = this;
      if (!this._isRunning) {
        return;
      }
      if (influenceData.node != null) {
        _ref = this._organisms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          organism = _ref[_i];
          factor = influenceData.node.factor === 'rand' ? getRandomElements(organism.getFactors()) : organism.getFactorOfType(influenceData.node.factor);
          node = influenceData.node.node === 'rand' ? organism._getRandomNodesOfFactorType(factor.factorType, 1)[0] : organism.getNode(influenceData.node.node);
          $(document).trigger('audanism/influence/node', [
            {
              'node': {
                'node': node,
                'factor': factor,
                'value': influenceData.node.valueModifier
              },
              'meta': influenceData.meta
            }
          ]);
          node.addCellValue(factor.factorType, influenceData.node.valueModifier);
          $node = $("[data-node-id='" + node.nodeId + "']").addClass('altered');
          setTimeout(function() {
            return $node.removeClass('altered');
          }, 2000);
        }
      }
      if (influenceData.random != null) {
        type = influenceData.random['object'];
        argNum = influenceData.random.num;
        argVal = influenceData.random.valueModifier;
        num = 0;
        valueMod = -1;
        numType = typeof argNum;
        if (numType === 'integer') {
          num = argNum;
        } else if (numType === 'array') {
          num = Math.randomRange(argNum[1], argNum[0]);
        } else if (numType === 'string' && argNum === 'rand') {
          num = Math.randomRange(type === 'factor' ? 1 : 5);
        }
        if (type === 'factor') {
          _ref1 = this._organisms;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            organism = _ref1[_j];
            factors = getRandomElements(organism.getFactors(), num);
            for (_k = 0, _len2 = factors.length; _k < _len2; _k++) {
              factor = factors[_k];
              valType = typeof argVal;
              if (valType === 'integer') {
                valueMod = argVal;
              } else if (valType === 'array') {
                valueMod = Math.randomRange(argVal[1], argVal[0]);
              } else if (valType === 'string' && argVal === 'rand') {
                valueMod = Math.randomRange(5, -5);
              }
              console.log("    --> influence: factor " + factor.factorType + " by " + valueMod);
              console.log("        ... before: " + factor);
              organism.getFactorOfType(factor.factorType).addValue(valueMod);
              console.log("        ... after: " + factor);
            }
          }
        } else if (type === 'node') {
          _ref2 = this._organisms;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            organism = _ref2[_l];
            nodes = getRandomElements(organism.getNodes(), num);
            for (_m = 0, _len4 = nodes.length; _m < _len4; _m++) {
              node = nodes[_m];
              valType = typeof argVal;
              if (valType === 'integer') {
                valueMod = argVal;
              } else if (valType === 'array') {
                valueMod = Math.randomRange(argVal[1], argVal[0]);
              } else if (valType === 'string' && argVal === 'rand') {
                valueMod = Math.randomRange(50, -50);
              }
              cell = getRandomElements(node.getCells(), 1)[0];
              console.log("    --> influence: node " + node.nodeId + "->" + cell.factorType + " by " + valueMod);
              console.log("        ... before: " + node);
              cell.addFactorValue(valueMod);
              console.log("        ... after: " + node);
            }
          }
        }
      }
      return console.log("---");
    };

    Environment.prototype.initConductor = function() {
      this.conductor = new Audanism.Sound.Conductor();
      return this.conductor.setOrganism(this._organisms[0]);
    };

    Environment.prototype.updateConductor = function() {
      return this.conductor.updateSounds();
    };

    return Environment;

  })();

  window.Environment = Environment;

  $(window).ready(function() {
    var environment;
    environment = new Environment;
    return window.environment = environment;
  });

}).call(this);
