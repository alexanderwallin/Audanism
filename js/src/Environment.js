// Generated by CoffeeScript 1.10.0

/*
	Environment

	The environment contains a set of organisms, a "conductor" 
	(responsible for the generative audio), handles outer influences 
	and the main loop.

	@author Alexander Wallin
	@url    http://alexanderwallin.com
 */

(function() {
  var Environment;

  Environment = (function() {
    Environment.NUM_ORGANISMS = 1;

    Environment.TIME_INTERVAL = 500;

    function Environment() {
      var i;
      this._iterationCount = 0;
      this._isRunning = false;
      this._isSingleStep = false;
      this.visualOrganism = new Audanism.Graphic.VisualOrganism();
      this._organisms = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 1, ref = Environment.NUM_ORGANISMS; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          results.push(new Audanism.Environment.Organism);
        }
        return results;
      })();
      EventDispatcher.trigger('audanism/init/organism', [this._organisms[0]]);
      this._gui = new Audanism.GUI.GUI;
      this.listenToControls();
      this.createInfluenceSources();
      EventDispatcher.listen('audanism/influence', this, this.influence);
      this.initConductor();
      this.run();
      EventDispatcher.listen('audanism/controls/start', this, this.start);
      EventDispatcher.listen('audanism/controls/pause', this, this.pause);
      EventDispatcher.listen('audanism/controls/stop', this, this.stop);
      EventDispatcher.listen('audanism/controls/step', this, this.step);
    }

    Environment.prototype.run = function() {
      return this._intervalId = setInterval((function(_this) {
        return function() {
          return _this.handleIteration();
        };
      })(this), Environment.TIME_INTERVAL);
    };

    Environment.prototype.start = function() {
      var j, len, ref, results, sourceAdapter;
      this._isRunning = true;
      ref = this._influenceSources;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        sourceAdapter = ref[j];
        results.push(sourceAdapter.activate());
      }
      return results;
    };

    Environment.prototype.pause = function() {
      var j, len, ref, results, source;
      this._isRunning = false;
      ref = this._influenceSources;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        source = ref[j];
        results.push(source.deactivate());
      }
      return results;
    };

    Environment.prototype.stop = function() {
      this._isRunning = false;
      return clearInterval(this._intervalId);
    };

    Environment.prototype.step = function() {
      return this._isSingleStep = true;
    };

    Environment.prototype.listenToControls = function() {
      $(document).on('dmstart', (function(_this) {
        return function(e) {
          return EventDispatcher.trigger('audanism/controls/start');
        };
      })(this));
      $(document).on('dmpause', (function(_this) {
        return function(e) {
          return EventDispatcher.trigger('audanism/controls/pause');
        };
      })(this));
      $(document).on('dmstop', (function(_this) {
        return function(e) {
          return EventDispatcher.trigger('audanism/controls/stop');
        };
      })(this));
      return $(document).on('dmstep', (function(_this) {
        return function(e) {
          return EventDispatcher.trigger('audanism/controls/step');
        };
      })(this));
    };

    Environment.prototype.handleIteration = function() {
      var j, len, organism, ref, results;
      this._iterationCount++;
      if (this._isRunning || this._isSingleStep) {
        ref = this._organisms;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          organism = ref[j];
          organism.performNodeComparison();
          if (this._iterationCount % 10 === 0) {
            EventDispatcher.trigger('audanism/node/add', {
              'numNodes': 1
            });
          }
          EventDispatcher.trigger('audanism/iteration', [
            {
              'count': this._iterationCount,
              'organism': organism
            }
          ]);
          results.push(this._isSingleStep = false);
        }
        return results;
      }
    };

    Environment.prototype.createInfluenceSources = function() {
      this._influenceSources = [];
      this._influenceSources.push(new Audanism.SourceAdapter.InstagramSourceAdapter(6000, 'art'));
      this._influenceSources.push(new Audanism.SourceAdapter.InstagramSourceAdapter(3000, 'audanism'));
      return this._influenceSources.push(new Audanism.SourceAdapter.WheatherSourceAdapter(4000));
    };

    Environment.prototype.influence = function(influenceData) {
      var argNum, argVal, cell, factor, factorType, factors, influenceInfo, j, k, l, len, len1, len2, len3, m, node, nodes, num, numType, organism, ref, ref1, ref2, ref3, results, results1, type, valType, valueMod;
      if (!this._isRunning) {
        return;
      }
      if (influenceData.node != null) {
        ref = this._organisms;
        for (j = 0, len = ref.length; j < len; j++) {
          organism = ref[j];
          factor = influenceData.node.factor === 'rand' ? getRandomElements(organism.getFactors()) : organism.getFactorOfType(influenceData.node.factor);
          node = influenceData.node.node === 'rand' ? organism._getRandomNodesOfFactorType(factor.factorType, 1)[0] : organism.getNode(influenceData.node.node);
          influenceInfo = {
            'node': {
              'node': node,
              'factor': factor,
              'value': influenceData.node.valueModifier
            },
            'meta': influenceData.meta
          };
          EventDispatcher.trigger('audanism/influence/node', [influenceInfo]);
          node.addCellValue(factor.factorType, influenceData.node.valueModifier);
          EventDispatcher.trigger('audanism/influence/node/after', [influenceInfo]);
        }
      }
      if (influenceData.factor != null) {
        ref1 = this._organisms;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          organism = ref1[k];
          factor;
          if (influenceData.factor.factor === 'rand') {
            factorType = randomInt(1, Audanism.Environment.Organism.NUM_FACTORS);
            factor = organism.getFactorOfType(factorType);
          }
          if (factor) {
            influenceInfo = {
              'factor': {
                'factor': factor,
                'value': influenceData.factor.valueModifier
              },
              'meta': influenceData.meta
            };
            EventDispatcher.trigger('audanism/influence/factor', influenceInfo);
            factor.addValue(influenceData.factor.valueModifier);
            EventDispatcher.trigger('audanism/influence/factor/after', influenceInfo);
          }
        }
      }
      if (influenceData.random != null) {
        type = influenceData.random['object'];
        argNum = influenceData.random.num;
        argVal = influenceData.random.valueModifier;
        num = 0;
        valueMod = -1;
        numType = typeof argNum;
        if (numType === 'integer') {
          num = argNum;
        } else if (numType === 'array') {
          num = Math.randomRange(argNum[1], argNum[0]);
        } else if (numType === 'string' && argNum === 'rand') {
          num = Math.randomRange(type === 'factor' ? 1 : 5);
        }
        if (type === 'factor') {
          ref2 = this._organisms;
          results = [];
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            organism = ref2[l];
            factors = getRandomElements(organism.getFactors(), num);
            results.push((function() {
              var len3, m, results1;
              results1 = [];
              for (m = 0, len3 = factors.length; m < len3; m++) {
                factor = factors[m];
                valType = typeof argVal;
                if (valType === 'integer') {
                  valueMod = argVal;
                } else if (valType === 'array') {
                  valueMod = Math.randomRange(argVal[1], argVal[0]);
                } else if (valType === 'string' && argVal === 'rand') {
                  valueMod = Math.randomRange(5, -5);
                }
                results1.push(organism.getFactorOfType(factor.factorType).addValue(valueMod));
              }
              return results1;
            })());
          }
          return results;
        } else if (type === 'node') {
          ref3 = this._organisms;
          results1 = [];
          for (m = 0, len3 = ref3.length; m < len3; m++) {
            organism = ref3[m];
            nodes = getRandomElements(organism.getNodes(), num);
            results1.push((function() {
              var len4, n, results2;
              results2 = [];
              for (n = 0, len4 = nodes.length; n < len4; n++) {
                node = nodes[n];
                valType = typeof argVal;
                if (valType === 'integer') {
                  valueMod = argVal;
                } else if (valType === 'array') {
                  valueMod = Math.randomRange(argVal[1], argVal[0]);
                } else if (valType === 'string' && argVal === 'rand') {
                  valueMod = Math.randomRange(50, -50);
                }
                cell = getRandomElements(node.getCells(), 1)[0];
                results2.push(cell.addFactorValue(valueMod));
              }
              return results2;
            })());
          }
          return results1;
        }
      }
    };

    Environment.prototype.initConductor = function() {
      this.conductor = new Audanism.Audio.Conductor();
      return this.conductor.setOrganism(this._organisms[0]);
    };

    return Environment;

  })();

  window.Audanism.Environment.Environment = Environment;

}).call(this);
