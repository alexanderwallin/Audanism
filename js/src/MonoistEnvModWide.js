// Generated by CoffeeScript 1.4.0

/*
	MonoistEnvMulti synth - multiple oscillators with an envelope
*/


(function() {
  var MonoistEnvModWide,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MonoistEnvModWide = (function(_super) {

    __extends(MonoistEnvModWide, _super);

    function MonoistEnvModWide(note) {
      MonoistEnvModWide.__super__.constructor.call(this, note);
      this.asdr = new Audanism.Audio.Module.ASDR(0.03, 0.1, 100, 0.1);
      this.envelope = Audanism.Audio.audioContext.createGain();
      this.envelope.gain.value = 0;
      this.envelope.connect(this.pan);
      this.envelopes.push(this.envelope);
      this.pan1 = Audanism.Audio.audioContext.createPanner();
      this.pan1.setPosition(-1, 0, 0);
      this.pan1.connect(this.envelope);
      this.pan2 = Audanism.Audio.audioContext.createPanner();
      this.pan2.setPosition(1, 0, 0);
      this.pan2.connect(this.envelope);
      this.pan3 = Audanism.Audio.audioContext.createPanner();
      this.pan3.setPosition(0, 0, 0);
      this.pan3.connect(this.envelope);
      this.osc1 = Audanism.Audio.audioContext.createOscillator();
      this.osc1.type = this.getRandomOscType();
      this.osc1.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note);
      this.osc1.connect(this.pan1);
      this.osc2 = Audanism.Audio.audioContext.createOscillator();
      this.osc2.type = this.getRandomOscType();
      this.osc2.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note + 15);
      this.osc2.connect(this.pan2);
      this.osc3 = Audanism.Audio.audioContext.createOscillator();
      this.osc3.type = this.getRandomOscType();
      this.osc3.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note + 6.5);
      this.osc3.connect(this.pan2);
      this.oscillators.push(this.osc1);
      this.oscillators.push(this.osc2);
      this.oscillators.push(this.osc3);
      this.freqModGain1 = Audanism.Audio.audioContext.createGain();
      this.freqModGain1.gain.value = 5;
      this.freqModGain1.connect(this.osc1.frequency);
      this.freqMod1 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod1.type = 'square';
      this.freqMod1.frequency.value = 8;
      this.freqMod1.connect(this.freqModGain1);
      this.freqMod1.start(0);
      this.freqModGain2 = Audanism.Audio.audioContext.createGain();
      this.freqModGain2.gain.value = 5;
      this.freqModGain2.connect(this.osc2.frequency);
      this.freqMod2 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod2.type = 'triangle';
      this.freqMod2.frequency.value = 13.123;
      this.freqMod2.connect(this.freqModGain2);
      this.freqMod2.start(0);
      this.freqModGain3 = Audanism.Audio.audioContext.createGain();
      this.freqModGain3.gain.value = 15;
      this.freqModGain3.connect(this.osc3.frequency);
      this.freqMod3 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod3.type = 'sawtooth';
      this.freqMod3.frequency.value = 0.123;
      this.freqMod3.connect(this.freqModGain3);
      this.freqMod3.start(0);
      this.osc1.start(0);
      this.osc2.start(0);
    }

    return MonoistEnvModWide;

  })(Audanism.Audio.Synthesizer.Voice);

  window.Audanism.Audio.Synthesizer.MonoistEnvModWide = MonoistEnvModWide;

}).call(this);
