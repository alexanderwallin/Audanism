// Generated by CoffeeScript 1.10.0

/*
	Interprets text in different ways
 */

(function() {
  var TextInterpreter;

  TextInterpreter = (function() {
    function TextInterpreter() {}

    TextInterpreter.prototype.getNumCharsInGroups = function(str, numGroups, normalized) {
      var aChar, charIndex, charVal, chars, countRatios, counts, i, j, k, l, largestVal, len, len1, len2, m, numChars, ref, sum, val;
      chars = str.split('');
      numChars = 26;
      counts = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = numGroups - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(0);
        }
        return results;
      })();
      countRatios = null;
      normalized = normalized != null ? normalized : true;
      for (j = 0, len = chars.length; j < len; j++) {
        aChar = chars[j];
        charVal = aChar.toUpperCase().charCodeAt(0) - 65;
        if (charVal >= numChars || charVal < 0) {
          continue;
        }
        charIndex = Math.floor(charVal / (numChars / numGroups));
        counts[charIndex] = counts[charIndex] + 1;
      }
      if (normalized) {
        sum = 0;
        for (k = 0, len1 = counts.length; k < len1; k++) {
          i = counts[k];
          sum += i;
        }
        countRatios = (function() {
          var l, len2, results;
          results = [];
          for (l = 0, len2 = counts.length; l < len2; l++) {
            i = counts[l];
            results.push(i / sum);
          }
          return results;
        })();
        largestVal = -1;
        for (l = 0, len2 = countRatios.length; l < len2; l++) {
          val = countRatios[l];
          if (val > largestVal) {
            largestVal = val;
          }
        }
        for (i = m = 0, ref = countRatios.length - 1; 0 <= ref ? m <= ref : m >= ref; i = 0 <= ref ? ++m : --m) {
          val = countRatios[i];
          countRatios[i] = val / largestVal;
        }
      }
      if (normalized) {
        return countRatios;
      } else {
        return counts;
      }
    };

    return TextInterpreter;

  })();

  window.Audanism.Util.TextInterpreter = TextInterpreter;

}).call(this);
