// Generated by CoffeeScript 1.4.0

/*
	Interprets text in different ways
*/


(function() {
  var TextInterpreter;

  TextInterpreter = (function() {

    function TextInterpreter() {}

    TextInterpreter.prototype.getNumCharsInGroups = function(str, numGroups, normalized) {
      var char, charIndex, charVal, chars, countRatios, counts, i, largestVal, numChars, sum, val, _i, _j, _k, _l, _len, _len1, _len2, _ref;
      chars = str.split('');
      numChars = 26;
      counts = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = numGroups - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      countRatios = null;
      normalized = normalized != null ? normalized : true;
      for (_i = 0, _len = chars.length; _i < _len; _i++) {
        char = chars[_i];
        charVal = char.toUpperCase().charCodeAt(0) - 65;
        if (charVal >= numChars || charVal < 0) {
          continue;
        }
        charIndex = Math.floor(charVal / (numChars / numGroups));
        counts[charIndex] = counts[charIndex] + 1;
      }
      if (normalized) {
        sum = 0;
        for (_j = 0, _len1 = counts.length; _j < _len1; _j++) {
          i = counts[_j];
          sum += i;
        }
        countRatios = (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = counts.length; _k < _len2; _k++) {
            i = counts[_k];
            _results.push(i / sum);
          }
          return _results;
        })();
        largestVal = -1;
        for (_k = 0, _len2 = countRatios.length; _k < _len2; _k++) {
          val = countRatios[_k];
          if (val > largestVal) {
            largestVal = val;
          }
        }
        for (i = _l = 0, _ref = countRatios.length - 1; 0 <= _ref ? _l <= _ref : _l >= _ref; i = 0 <= _ref ? ++_l : --_l) {
          val = countRatios[i];
          countRatios[i] = val / largestVal;
        }
      }
      if (normalized) {
        return countRatios;
      } else {
        return counts;
      }
    };

    return TextInterpreter;

  })();

  window.Audanism.Util.TextInterpreter = TextInterpreter;

}).call(this);
