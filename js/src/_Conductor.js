// Generated by CoffeeScript 1.4.0

/*
	Class that takes care of all the music
*/


(function() {
  var Conductor;

  Conductor = (function() {

    function Conductor() {
      var i, self,
        _this = this;
      self = this;
      this.muted = true;
      this.organism = null;
      this.audiolet = new Audiolet();
      this.noise = new Audanism.Sound.Noise(this.audiolet);
      this.influenceSounds = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 4; i = ++_i) {
          _results.push(new Audanism.Sound.Instrument.NodeInfluenceSound2(this.audiolet));
        }
        return _results;
      }).call(this);
      this.influenceActionSounds = [];
      this.comparisonSounds = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 1; i = ++_i) {
          _results.push(new Audanism.Sound.Instrument.NodeComparisonSound1(this.audiolet));
        }
        return _results;
      }).call(this);
      EventDispatcher.listen('audanism/iteration', this, this.updateSounds);
      $(document).on('audanism/influence/node', function(e, influenceData) {
        return self.handleNodeInfluence.call(self, e, influenceData);
      });
      $(document).on('audanism/alternodes', function(e, nodes) {
        return self.handleNodeComparison.call(self, e, nodes);
      });
    }

    Conductor.prototype.setOrganism = function(organism) {
      return this.organism = organism;
    };

    Conductor.prototype.mute = function() {
      if (this.noise != null) {
        this.noise.gain.gain.setValue(0);
      }
      return this.muted = true;
    };

    Conductor.prototype.unmute = function() {
      if (this.noise != null) {
        this.noise.gain.gain.setValue(1);
      }
      return this.muted = false;
    };

    Conductor.prototype.updateSounds = function(iterationInfo) {
      var disharmonyData, disharmonyNew, disharmonyOld, disharmonyRatio;
      console.log('#updateSounds', iterationInfo);
      if (iterationInfo.count % 10 === !0) {
        return;
      }
      disharmonyData = this.organism.getDisharmonyHistoryData(200);
      disharmonyNew = disharmonyData[disharmonyData.length - 1][2];
      disharmonyOld = disharmonyData[0][2];
      disharmonyRatio = disharmonyNew / disharmonyOld;
      if (this.noise != null) {
        return this.noise.lpf.frequency.setValue(disharmonyRatio * 100);
      }
    };

    Conductor.prototype.handleNodeInfluence = function(e, influenceData) {
      var influenceActionSound, length, nodeFreq, nodeId, nodePan;
      if (this.muted) {
        return;
      }
      console.log('   has meta:', influenceData.meta);
      if (!this.organism || !influenceData.meta) {
        return;
      }
      nodeId = influenceData.node.node.nodeId;
      nodeFreq = 80 + (nodeId * 40);
      nodePan = nodeId / this.organism.getNodes().length;
      length = 0.4;
      this.influenceSounds[influenceData.meta.current - 1].hit(nodeFreq, nodePan, length);
      if (influenceData.meta.source === 'instagram' && influenceData.meta.current === influenceData.meta.total && this.influenceActionSounds.length < 3) {
        influenceActionSound = new Audanism.Sound.Instrument.InfluenceActionSound1();
        influenceActionSound.hit();
        this.influenceActionSounds.push(influenceActionSound);
        return console.log('add influence action sound', influenceActionSound);
      }
    };

    Conductor.prototype.handleNodeComparison = function(e, comparisonData) {
      var freq, i, length, node, pan, _i, _ref, _results;
      if (this.muted) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = comparisonData.nodes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        node = comparisonData.nodes[i];
        freq = 80 + Math.pow(node.getCell(comparisonData.factorType).factorValue, 1.1);
        pan = node.nodeId / this.organism.getNodes().length;
        length = 0.1;
        _results.push(this.comparisonSounds[i].hit(freq, pan, length));
      }
      return _results;
    };

    return Conductor;

  })();

  Audanism.Sound.Conductor = Conductor;

}).call(this);
