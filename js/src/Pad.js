// Generated by CoffeeScript 1.4.0

/*
	Pad
*/


(function() {
  var Pad,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pad = (function(_super) {

    __extends(Pad, _super);

    function Pad(instrumentsIn) {
      this.instrumentsIn = instrumentsIn;
      Pad.__super__.constructor.call(this, this.instrumentsIn, 'MonoistEnvMod');
    }

    Pad.prototype.setupVoice = function(voice) {
      /*
      		# Actually, all this doesn't work, but at least 
      		# we get a spread effect
      		relNote = voice.note / 120
      
      		xRad = (2 * relNote - 1) * (Math.PI / 2)
      		zRad = xRad + Math.PI / 2
      		zRad = Math.PI - zRad if zRad > Math.PI / 2
      
      		x = Math.sin(xRad)
      		z = Math.sin(zRad)
      
      		#voice.pan.setPosition( x, 0, z )
      */
      return voice.pan.setPosition(1 - Math.random() * 2, 0, 1 - Math.random() * 2);
    };

    Pad.prototype.playChord = function(baseNote) {
      var note, notes, _i, _len, _results;
      notes = [baseNote - 12, baseNote, baseNote + 7, baseNote + 10, baseNote + 15];
      _results = [];
      for (_i = 0, _len = notes.length; _i < _len; _i++) {
        note = notes[_i];
        _results.push(this.noteOn(note));
      }
      return _results;
    };

    return Pad;

  })(Audanism.Audio.Instrument.Instrument);

  window.Audanism.Audio.Instrument.Pad = Pad;

}).call(this);
