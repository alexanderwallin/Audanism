// Generated by CoffeeScript 1.10.0

/*
	Pad
 */

(function() {
  var Pad,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Pad = (function(superClass) {
    extend(Pad, superClass);

    function Pad(instrumentsIn) {
      this.instrumentsIn = instrumentsIn;
      Pad.__super__.constructor.call(this, this.instrumentsIn, 'MonoistEnvMod');
    }

    Pad.prototype.setupVoice = function(voice) {

      /*
      		 * Actually, all this doesn't work, but at least 
      		 * we get a spread effect
      		relNote = voice.note / 120
      
      		xRad = (2 * relNote - 1) * (Math.PI / 2)
      		zRad = xRad + Math.PI / 2
      		zRad = Math.PI - zRad if zRad > Math.PI / 2
      
      		x = Math.sin(xRad)
      		z = Math.sin(zRad)
      
      		#voice.pan.setPosition( x, 0, z )
       */
      return voice.pan.setPosition(1 - Math.random() * 2, 0, 1 - Math.random() * 2);
    };

    Pad.prototype.playChord = function(baseNote) {
      var i, len, note, notes, results;
      notes = [baseNote - 12, baseNote, baseNote + 7, baseNote + 10, baseNote + 15];
      results = [];
      for (i = 0, len = notes.length; i < len; i++) {
        note = notes[i];
        results.push(this.noteOn(note));
      }
      return results;
    };

    return Pad;

  })(Audanism.Audio.Instrument.Instrument);

  window.Audanism.Audio.Instrument.Pad = Pad;

}).call(this);
