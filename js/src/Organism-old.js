// Generated by CoffeeScript 1.4.0

/*
Organism
*/


(function() {
  var Organism;

  Organism = (function() {

    Organism.NUM_FACTORS = 5;

    Organism.NUM_SOUNDS = 1;

    Organism.TIME_INTERVAL = 3000;

    /*
    	Constructor
    */


    function Organism() {
      var factorValue, i;
      this._factorValues = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Organism.NUM_FACTORS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(0.01 * Math.floor(Math.random() * 100));
        }
        return _results;
      })();
      this._factors = (function() {
        var _i, _len, _ref, _results;
        _ref = this._factorValues;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          factorValue = _ref[i];
          _results.push(new Factor(i, factorValue));
        }
        return _results;
      }).call(this);
      this._sounds = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Organism.NUM_SOUNDS; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Sound);
        }
        return _results;
      })();
      console.log(this._factors, this._sounds);
      this.createGUI();
      this.state = {
        disharmony: 0,
        performedMutations: 0,
        iterations: 0
      };
      this.stateHistory = [];
      this.__isInTherapy = false;
      this.therapyLoop();
    }

    /*
    	Creates a (jQuery) GUI
    */


    Organism.prototype.createGUI = function() {
      var bucketsHtml, factor, factorEl, factorValue, i, j, sound, soundEl, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.$factors = $("#factors");
      this.$sounds = $("#sounds");
      this.$state = $("#organism-state");
      _ref = this._factors;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        factor = _ref[i];
        factorEl = $("<div class='factor' data-factor='" + i + "' data-factor-value='" + factor.factorValue + "'><span class='factor-value'>" + factor.factorValue + "</span></div>");
        factorEl.append(function() {
          return "<span class='factor-modifier' data-factor-modifier='5' data-factor-target='" + i + "'>+</span>					<span class='factor-modifier' data-factor-modifier='-5' data-factor-target='" + i + "'>-</span>";
        }).find(".factor-modifier").on("click", function(e) {
          var $factorParent, currentFactorValue, f, factorModifications, factorTarget;
          console.log("factor modifier clicked", e.target);
          factorTarget = parseInt($(e.target).attr("data-factor-target"));
          factorModifications = (function() {
            var _j, _ref1, _results;
            _results = [];
            for (f = _j = 1, _ref1 = this._factors.length; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; f = 1 <= _ref1 ? ++_j : --_j) {
              _results.push(0);
            }
            return _results;
          }).call(_this);
          factorModifications[factorTarget] = parseInt($(e.target).attr("data-factor-modifier"));
          $factorParent = $(e.target).parent();
          currentFactorValue = parseInt($factorParent.attr("data-factor-value"));
          $factorParent.attr("data-factor-value", currentFactorValue + factorModifications[factorTarget]);
          $factorParent.find(".factor-value").html($factorParent.attr("data-factor-value"));
          return _this.perceive(factorModifications);
        }).end().appendTo(this.$factors);
        factor.$factorEl = factorEl;
      }
      _ref1 = this._sounds;
      for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
        sound = _ref1[j];
        bucketsHtml = (function() {
          var _k, _len2, _ref2, _results;
          _ref2 = sound.getBucketValues();
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            factorValue = _ref2[_k];
            _results.push("<li>" + factorValue + "</li>");
          }
          return _results;
        })();
        soundEl = $("<div class='sound' data-sound='" + sound.soundId + "' data-buckets='" + (JSON.toString(sound.getBucketValues())) + "'></div>").html("<ul class='sound-buckets'>" + (bucketsHtml.join("")) + "</ul>");
        soundEl.appendTo(this.$sounds);
        sound.$soundEl = soundEl;
      }
      $("a").on('click', function(e) {
        e.preventDefault();
        switch ($(e.target).attr("href")) {
          case "#start":
            return _this.startTherapy();
          case "#stop":
            return _this.stopTherapy();
        }
      });
      return google.setOnLoadCallback(function() {
        _this.$disharmonyChart = $("#disharmony-chart");
        _this.disharmonyChart = new google.visualization.LineChart(_this.$disharmonyChart.get(0));
        return $(document).on('updategui.dm', function() {
          return _this.drawCharts();
        });
      });
    };

    Organism.prototype.updateGUI = function() {
      var sound, _i, _len, _ref;
      _ref = this._sounds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sound = _ref[_i];
        sound.updateSoundEl();
      }
      this.$state.html("Total disharmony: " + this.state.disharmony + "<br />No. mutations: " + this.state.performedMutations);
      return $(document).trigger('updategui.dm');
    };

    Organism.prototype.drawCharts = function() {
      var data, disharmonyData, options;
      disharmonyData = this.stateHistory.slice(-300);
      disharmonyData.unshift(['Iteration', 'Disharmony']);
      data = google.visualization.arrayToDataTable(disharmonyData);
      options = {
        title: 'Disharmony chart',
        vAxis: {
          viewWindowMode: 'explicit',
          viewWindow: {
            min: 0
          }
        }
      };
      return this.disharmonyChart.draw(data, options);
    };

    Organism.prototype.perceive = function(factorModifications) {
      var currentBucketValue, i, modification, modifiedSound, valueDiff, _i, _j, _len, _len1;
      console.log("@perceive", factorModifications);
      for (i = _i = 0, _len = factorModifications.length; _i < _len; i = ++_i) {
        valueDiff = factorModifications[i];
        this._factors[i].modifyValue(valueDiff);
      }
      for (i = _j = 0, _len1 = factorModifications.length; _j < _len1; i = ++_j) {
        modification = factorModifications[i];
        if (modification > 0) {
          modifiedSound = (SoundAdvisor.selectSounds(this._sounds, 1))[0];
          modifiedSound.addBucketValue(i, modification);
          modifiedSound.updateSoundEl();
          console.log("modified sound", modifiedSound);
        } else if (modification < 0) {
          console.log("subtract:", modification);
          while (modification < 0) {
            modifiedSound = (SoundAdvisor.selectSounds(this._sounds, 1))[0];
            currentBucketValue = modifiedSound.getBucketValue(i);
            console.log("\tsubtracting from " + (modifiedSound.getString()) + ", current bucket:", currentBucketValue);
            if (currentBucketValue + modification >= 0) {
              modifiedSound.setBucketValue(i, currentBucketValue + modification);
              modification = 0;
              console.log("\t\t-> " + (modifiedSound.getString()) + " does the trick");
            } else {
              console.log("\t\tremove all from", modifiedSound.getString(), "(" + i + ") = " + (modifiedSound.getBucketValue(i)));
              modifiedSound.setBucketValue(i, 0);
              modification += currentBucketValue;
            }
            console.log("\t\t(modification left: " + modification + ")");
          }
        }
      }
      return this.updateGUI();
    };

    Organism.prototype.getTotalDisharmony = function() {
      var disharmonies, sound;
      disharmonies = (function() {
        var _i, _len, _ref, _results;
        _ref = this._sounds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sound = _ref[_i];
          _results.push(sound.getDisharmony());
        }
        return _results;
      }).call(this);
      this.state.disharmony = disharmonies.reduce(function(t, s) {
        return t + s;
      });
      return this.state.disharmony;
    };

    Organism.prototype.stopTherapy = function() {
      return this._isInTherapy = false;
    };

    Organism.prototype.startTherapy = function() {
      return this._isInTherapy = true;
    };

    Organism.prototype.therapyLoop = function() {
      var _this = this;
      return setInterval(function() {
        return _this.performTherapy();
      }, Organism.TIME_INTERVAL);
    };

    Organism.prototype.performTherapy = function() {
      var factor, _i, _len, _ref, _results;
      if (this._isInTherapy) {
        _ref = this._factors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          factor = _ref[_i];
          _results.push(HarmonyCalculator.calcFactorValueFromSounds(factor.factorType, this._sounds));
        }
        return _results;
      }
    };

    Organism.prototype.performTherapyzzz = function() {
      var actionInfo, actionNr, currSoundDiffs, currSoundDiffsValue, diff, potentialSoundDiffValues, potentialSoundDiffs, sound, soundsToCompare, _i, _len,
        _this = this;
      if (this._isInTherapy) {
        console.log("\n--- PERFORM THERAPY ---\n");
        soundsToCompare = SoundAdvisor.selectSounds(this._sounds, 2);
        $(".in-comparison").removeClass("in-comparison");
        for (_i = 0, _len = soundsToCompare.length; _i < _len; _i++) {
          sound = soundsToCompare[_i];
          sound.$soundEl.addClass("in-comparison");
        }
        currSoundDiffs = SoundAdvisor.getSoundDiffs(soundsToCompare);
        currSoundDiffsValue = SoundAdvisor.getTotalDiffsValue(currSoundDiffs);
        potentialSoundDiffs = SoundAdvisor.getPotentialSoundDiffs(soundsToCompare);
        potentialSoundDiffs.sort(function(a, b) {
          return a.diffValueSum > b.diffValueSum;
        });
        potentialSoundDiffValues = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = potentialSoundDiffs.length; _j < _len1; _j++) {
            diff = potentialSoundDiffs[_j];
            _results.push(diff.diffValueSum);
          }
          return _results;
        })();
        if (potentialSoundDiffs.length > 0) {
          console.log("-> Perform action", potentialSoundDiffs[0].actionKey, "on", soundsToCompare[0].getString(), "and", soundsToCompare[1].getString());
          actionInfo = potentialSoundDiffs[0].actionKey.split(":");
          console.log("\t\tAction info:", actionInfo);
          actionNr = parseInt(actionInfo[1], 10);
          switch (actionNr) {
            case 1:
              soundsToCompare[0].addBucketValue(actionInfo[0], -1);
              soundsToCompare[1].addBucketValue(actionInfo[0], 1);
              break;
            case 2:
              soundsToCompare[0].addBucketValue(actionInfo[0], 1);
              soundsToCompare[1].addBucketValue(actionInfo[0], -1);
              break;
            default:
              console.log("\t\t\tactionNr (" + actionNr + ") is neither 1 nor 2");
          }
          this.state.performedMutations++;
        } else {
          console.log("no action available");
        }
        this.state.iterations++;
        this.stateHistory.push([this.state.iterations, this.getTotalDisharmony()]);
        return this.updateGUI();
      }
    };

    return Organism;

  })();

  window.Organism = Organism;

}).call(this);
