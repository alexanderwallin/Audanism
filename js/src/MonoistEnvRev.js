// Generated by CoffeeScript 1.10.0

/*
	MonoistEnvRev synth - sine with an envelope and reverb
 */

(function() {
  var MonoistEnvRev;

  MonoistEnvRev = (function() {
    function MonoistEnvRev() {
      this.note = randomInt(40, 80);
      this.noteIsOn = false;
      this.volNode = Audanism.Audio.audioContext.createGain();
      this.volNode.gain.value = 0.25;
      this.volNode.connect(Audanism.Audio.audioContext.destination);
      this.compressor = Audanism.Audio.audioContext.createDynamicsCompressor();
      this.compressor.connect(this.volNode);
      this.dry = Audanism.Audio.audioContext.createGain();
      this.dry.gain.value = 0.8;
      this.dry.connect(this.compressor);
      this.wet = Audanism.Audio.audioContext.createGain();
      this.wet.gain.value = 0.5;
      this.wet.connect(this.compressor);
      this.impulse = new Audanism.Audio.Module.Impulse(0.2, 50);
      this.rev1 = Audanism.Audio.audioContext.createConvolver();
      this.rev1.buffer = this.impulse.getBuffer();
      this.rev1.connect(this.wet);
      this.panner1 = Audanism.Audio.audioContext.createPanner();
      this.panner1.setPosition(1 - Math.random() * 2, 0, 0);
      this.panner1.connect(this.dry);
      this.panner1.connect(this.rev1);
      this.asdr = new Audanism.Audio.Module.ASDR(0.5, 0.1, 10, 0.1);
      this.envelope = Audanism.Audio.audioContext.createGain();
      this.envelope.gain.setValueAtTime(0, 0);
      this.envelope.connect(this.panner1);
      this.osc = Audanism.Audio.audioContext.createOscillator();
      this.osc.frequency.value = Audanism.Audio.Harmonizer.getFreqFromNote(this.note);
      this.osc.connect(this.envelope);
      this.osc.start(0);
    }

    MonoistEnvRev.prototype.noteOn = function(note) {
      var attackEndTime, now;
      now = Audanism.Audio.audioContext.currentTime;
      attackEndTime = now + this.asdr.attack;
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);
      this.envelope.gain.linearRampToValueAtTime(1, attackEndTime);
      this.envelope.gain.setTargetAtTime(this.asdr.sustain / 100, attackEndTime, (this.asdr.decay / 100) + 0.001);
      return this.noteIsOn = true;
    };

    MonoistEnvRev.prototype.noteOff = function() {
      var now, releaseTime;
      now = Audanism.Audio.audioContext.currentTime;
      releaseTime = now + this.asdr.release;
      console.log(now);
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);
      this.envelope.gain.linearRampToValueAtTime(0, releaseTime);
      return this.noteIsOn = false;
    };

    return MonoistEnvRev;

  })();

  window.Audanism.Audio.Synthesizer.MonoistEnvRev = MonoistEnvRev;

}).call(this);
