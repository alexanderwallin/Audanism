// Generated by CoffeeScript 1.4.0

/*
	MonoistEnvMulti synth - multiple oscillators with an envelope
*/


(function() {
  var MonoistEnvMod;

  MonoistEnvMod = (function() {

    function MonoistEnvMod() {
      this.note = randomInt(40, 80);
      this.noteIsOn = false;
      this.volNode = Audanism.Audio.audioContext.createGain();
      this.volNode.gain.value = 0.25;
      this.volNode.connect(Audanism.Audio.audioContext.destination);
      this.compressor = Audanism.Audio.audioContext.createDynamicsCompressor();
      this.compressor.connect(this.volNode);
      this.panner1 = Audanism.Audio.audioContext.createPanner();
      this.panner1.setPosition(0.5 - Math.random() * 1, 0, 0);
      this.panner1.connect(this.compressor);
      this.asdr = new Audanism.Audio.Module.ASDR(0.03, 0.1, 100, 0.1);
      this.envelope1 = Audanism.Audio.audioContext.createGain();
      this.envelope1.gain.setValueAtTime(0, 0);
      this.envelope1.connect(this.panner1);
      this.osc1 = Audanism.Audio.audioContext.createOscillator();
      this.osc1.type = 'sine';
      this.osc1.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note);
      this.osc1.connect(this.envelope1);
      this.freqModGain1 = Audanism.Audio.audioContext.createGain();
      this.freqModGain1.gain.value = 10;
      this.freqModGain1.connect(this.osc1.frequency);
      this.freqMod1 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod1.type = 'square';
      this.freqMod1.frequency.value = 20;
      this.freqMod1.connect(this.freqModGain1);
      this.freqMod1.start(0);
      this.freqModGain2 = Audanism.Audio.audioContext.createGain();
      this.freqModGain2.gain.value = 15;
      this.freqModGain2.connect(this.osc1.frequency);
      this.freqMod2 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod2.type = 'triangle';
      this.freqMod2.frequency.value = 0.5;
      this.freqMod2.connect(this.freqModGain2);
      this.freqMod2.start(0);
      this.osc1.start(0);
    }

    MonoistEnvMod.prototype.noteOn = function(note) {
      var attackEndTime, now;
      now = Audanism.Audio.audioContext.currentTime;
      attackEndTime = now + this.asdr.attack;
      this.envelope1.gain.cancelScheduledValues(now);
      this.envelope1.gain.setValueAtTime(this.envelope1.gain.value, now);
      this.envelope1.gain.linearRampToValueAtTime(1, attackEndTime);
      this.envelope1.gain.setTargetAtTime(this.asdr.sustain / 100, attackEndTime, (this.asdr.decay / 100) + 0.001);
      return this.noteIsOn = true;
    };

    MonoistEnvMod.prototype.noteOff = function() {
      var now, releaseTime;
      now = Audanism.Audio.audioContext.currentTime;
      releaseTime = now + this.asdr.release;
      console.log(now);
      this.envelope1.gain.cancelScheduledValues(now);
      this.envelope1.gain.setValueAtTime(this.envelope1.gain.value, now);
      this.envelope1.gain.linearRampToValueAtTime(0, releaseTime);
      return this.noteIsOn = false;
    };

    return MonoistEnvMod;

  })();

  window.Audanism.Audio.Synthesizer.MonoistEnvMod = MonoistEnvMod;

}).call(this);
