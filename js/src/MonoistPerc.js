// Generated by CoffeeScript 1.10.0

/*
	MonoistEnv synth - sine with an envelope
 */

(function() {
  var MonoistPerc,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MonoistPerc = (function(superClass) {
    extend(MonoistPerc, superClass);

    function MonoistPerc(note) {
      MonoistPerc.__super__.constructor.call(this, note);
      this.delay = Audanism.Audio.audioContext.createDelay();
      this.delay.delayTime = 4;
      this.delay.connect(this.pan);
      this.lpf = Audanism.Audio.audioContext.createBiquadFilter();
      this.lpf.type = 'lowpass';
      this.lpf.frequency.value = 20000;
      this.hpf = Audanism.Audio.audioContext.createBiquadFilter();
      this.hpf.type = 'highpass';
      this.hpf.frequency.value = 0;
      this.hpf.connect(this.lpf);
      this.lpf.connect(this.delay);
      this.asdr = new Audanism.Audio.Module.ASDR(0.01, 0, 1, 0.2);
      this.envelope = Audanism.Audio.audioContext.createGain();
      this.envelope.gain.setValueAtTime(0, 0);
      this.envelope.connect(this.hpf);
      this.envelopes.push(this.envelope);
      this.osc = Audanism.Audio.audioContext.createOscillator();
      this.osc.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note);
      this.osc.connect(this.envelope);
      this.osc.start(0);
      this.oscillators.push(this.osc);
      this.mod = Audanism.Audio.audioContext.createOscillator();
      this.mod.type = this.getRandomOscType();
      this.mod.frequency = randomInt(10, 20);
      this.mod.start(0);
      this.modGain = Audanism.Audio.audioContext.createGain();
      this.modGain.gain.value = 20;
      this.mod.connect(this.modGain);
      this.modGain.connect(this.osc.frequency);
      this.mod2 = Audanism.Audio.audioContext.createOscillator();
      this.mod2.type = 'sawtooth';
      this.mod2.frequency = randomInt(500, 1000);
      this.mod2.start(0);
      this.modGain2 = Audanism.Audio.audioContext.createGain();
      this.modGain2.gain.value = 100;
      this.mod2.connect(this.modGain2);
      this.modGain2.connect(this.osc.frequency);
    }

    MonoistPerc.prototype.noteOn = function() {
      var attackEndTime, decayEndTime, now, releaseEndTime;
      now = Audanism.Audio.audioContext.currentTime + this.waitTime;
      attackEndTime = now + this.asdr.attack;
      decayEndTime = attackEndTime + this.asdr.decay;
      releaseEndTime = attackEndTime + this.asdr.release;
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(0, now);
      this.envelope.gain.linearRampToValueAtTime(1, attackEndTime);
      return this.envelope.gain.linearRampToValueAtTime(0, releaseEndTime);
    };

    return MonoistPerc;

  })(Audanism.Audio.Synthesizer.Voice);

  window.Audanism.Audio.Synthesizer.MonoistPerc = MonoistPerc;

}).call(this);
