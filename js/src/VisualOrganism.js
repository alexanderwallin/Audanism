// Generated by CoffeeScript 1.4.0

/*
	WebGL organism visualizer
*/


(function() {
  var VisualOrganism;

  VisualOrganism = (function() {

    function VisualOrganism() {
      var _this;
      _this = this;
      this.opts = {
        'cameraDistanceStart': 1300,
        'cameraDistance': 1300,
        'clusterSize': 500,
        'roomSize': 2000,
        'roomVertices': 200,
        'roomColor': new THREE.Color(0x3AAB92),
        'roomColorChaos': new THREE.Color(0x941950),
        'fogColorStart': new THREE.Color(0x999999),
        'ballSize': 10,
        'ballColor': new THREE.Color(0xF2ED50),
        'ballColorCompare': new THREE.Color(0xED8A34),
        'ballCompareTime': 1000,
        'ballColorInfluence': new THREE.Color(0xED34A0),
        'ballInfluenceTime': 2000
      };
      EventDispatcher.listen('audanism/init/organism', this, this.onInitOrganism);
      EventDispatcher.listen('audanism/iteration', this, this.onIteration);
      EventDispatcher.listen('audanism/influence/node', this, this.onInfluenceNode);
      EventDispatcher.listen('audanism/compare/nodes', this, this.onCompareNodes);
      this.initControls();
    }

    VisualOrganism.prototype.onInitOrganism = function(organism) {
      console.log('#onInitOrganism', organism, this);
      this.organism = organism;
      return this.init();
    };

    VisualOrganism.prototype.init = function() {
      window.Audanism.Graphic["public"] = {
        'animate': this.animate.bind(this)
      };
      this.buildScene();
      return this.animate();
    };

    VisualOrganism.prototype.buildScene = function() {
      var ball, ball3d, ballGeometry, ballMaterial, i, _i, _ref;
      console.log('#buildScene');
      this.camera;
      this.scene;
      this.renderer;
      this.lightAmb;
      this.lightSpot;
      this.balls = [];
      this.balls3d = [];
      this.numBalls = this.organism.getNodes().length;
      this.sphereSize = 500;
      this.frame = 0;
      this.mouseX = 0;
      this.mouseY = 0;
      this.mouseStartX = 0;
      this.mouseStartY = 0;
      this.mouseDX = 0;
      this.mouseDY = 0;
      this.mouseDown = false;
      this.keyLeft = false;
      this.keyRight = false;
      this.keyUp = false;
      this.keyDown = false;
      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
      this.camera.position = new THREE.Vector3(1, 0.25, 1).multiplyScalar(this.opts.cameraDistanceStart);
      this.camera.target = new THREE.Vector3(0, 0, 0);
      this.camera.lookAt(this.camera.target);
      this.camera.setLens(35);
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.Fog(0x999999, this.opts.clusterSize / 2, this.opts.clusterSize * 12);
      this.room = new THREE.Mesh(new THREE.SphereGeometry(this.opts.roomSize, this.opts.roomVertices, this.opts.roomVertices), new THREE.MeshPhongMaterial({
        'ambient': this.opts.roomColor,
        'side': THREE.BackSide,
        'shading': THREE.FlatShading,
        'blending': THREE.AdditiveBlending,
        'vertexColors': THREE.VertexColors
      }));
      this.scene.add(this.room);
      for (i = _i = 0, _ref = this.numBalls - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        ball = {
          ballId: i,
          hello: "hello. i am ball no " + i + ".",
          direction: new THREE.Vector3(2 * Math.random() - 1, 2 * Math.random() - 1, 2 * Math.random() - 1),
          ballSize: this.opts.ballSize
        };
        ball.pos = new THREE.Vector3(ball.direction.x * Math.random() * this.opts.clusterSize, ball.direction.y * Math.random() * this.opts.clusterSize, ball.direction.z * Math.random() * this.opts.clusterSize);
        if (i === 0) {
          console.log('>> ball', ball);
          console.log('>> ball start at', ball.pos);
        }
        ballGeometry = new THREE.SphereGeometry(ball.ballSize, 20, 20);
        ballMaterial = new THREE.MeshLambertMaterial({
          'ambient': this.opts.ballColor,
          'side': THREE.DoubleSide,
          'shading': THREE.FlatShading,
          'blending': THREE.AdditiveBlending,
          'vertexColors': THREE.VertexColors
        });
        ball3d = new THREE.Mesh(ballGeometry, ballMaterial);
        ball3d.ballId = ball.ballId;
        ball.ball3d = ball3d;
        ball.ball3d.position = ball.pos.clone();
        console.log(ball.pos);
        this.scene.add(ball.ball3d);
        this.balls[i] = ball;
      }
      console.log(this.balls);
      this.lightAmb = new THREE.AmbientLight(0xffffff);
      this.scene.add(this.lightAmb);
      this.lightSpot = new THREE.DirectionalLight(0xffffff, 0.2);
      this.lightSpot.position.set(0, 1, 1);
      this.scene.add(this.lightSpot);
      this.axis = new THREE.AxisHelper(500);
      this.scene.add(this.axis);
      this.renderer = new THREE.WebGLRenderer({
        'alpha': false,
        'antialias': true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      console.log(this.scene);
      return $('#container').append(this.renderer.domElement);
    };

    VisualOrganism.prototype.animate = function() {
      requestAnimationFrame(Audanism.Graphic["public"].animate);
      this.frame++;
      this.camera.position.x = Math.sin(this.frame / 200) * this.opts.cameraDistance;
      this.camera.position.z = Math.cos(this.frame / 200) * this.opts.cameraDistance;
      this.camera.lookAt(this.camera.target);
      TWEEN.update();
      return this.renderer.render(this.scene, this.camera);
    };

    VisualOrganism.prototype.initControls = function() {
      var _this = this;
      _this = this;
      $(document).on('keydown', function(e) {
        switch (e.which) {
          case 37:
            return _this.keyLeft = true;
          case 38:
            return _this.keyUp = true;
          case 39:
            return _this.keyRight = true;
          case 40:
            return _this.keyDown = true;
        }
      });
      return $(document).on('keyup', function(e) {
        switch (e.which) {
          case 37:
            return _this.keyLeft = false;
          case 38:
            return _this.keyUp = false;
          case 39:
            return _this.keyRight = false;
          case 40:
            return _this.keyDown = false;
        }
      });
    };

    VisualOrganism.prototype.onIteration = function(organism) {
      var allFactorsChangeAvg, allFactorsChangeSum, ball, ballScaleFrom, ballScaleTo, cell, cells, dish, disharmony, disharmonyAvg, disharmonySum, factor, factorDishCurr, factorDishStart, latestDisharmonyBlock, latestDisharmonyChange, newBallRelSize, newPos, node, relativeDisharmony, tweenFrom, tweenTo, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _results;
      console.log('#onIteration');
      disharmony = organism.getDisharmonyHistoryData();
      if (disharmony.length === 0) {
        return;
      }
      disharmony = disharmony[disharmony.length - 1];
      if (!(this.opts.initialDisharmonyData != null)) {
        this.opts.initialDisharmonyData = disharmony;
        console.log('stored initial disharmony', disharmony);
      }
      relativeDisharmony = disharmony[2] / this.opts.initialDisharmonyData[2];
      this.largestDistance = 0;
      _ref = this.balls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ball = _ref[_i];
        newPos = ball.pos.clone().multiplyScalar(relativeDisharmony);
        tweenFrom = ball.ball3d.position.clone();
        tweenTo = {
          'x': newPos.x,
          'y': newPos.y,
          'z': newPos.z
        };
        this._tweenBall(ball, tweenFrom, tweenTo);
        if (ball.ball3d.position.length() > this.largestDistance) {
          this.largestDistance = ball.ball3d.position.length();
        }
      }
      this._tweenCameraDistance(this.largestDistance * (this.opts.cameraDistanceStart / this.opts.clusterSize));
      latestDisharmonyBlock = organism.getDisharmonyHistoryData().slice(-10);
      disharmonySum = 0;
      for (_j = 0, _len1 = latestDisharmonyBlock.length; _j < _len1; _j++) {
        dish = latestDisharmonyBlock[_j];
        disharmonySum += dish[2];
      }
      disharmonyAvg = disharmonySum / latestDisharmonyBlock.length;
      latestDisharmonyChange = latestDisharmonyBlock[latestDisharmonyBlock.length - 1][2] / disharmonyAvg;
      /*
      		console.log 'fog color start:', @opts.fogColorStart
      		console.log 'latestDisharmonyBlock', latestDisharmonyBlock
      		console.log 'latestDisharmonyChange', latestDisharmonyChange
      		console.log 'color scalar', (1 + (1 - latestDisharmonyChange))
      		newFogColor = @opts.fogColorStart.clone().multiplyScalar 0.2 * (1 + (1 - latestDisharmonyChange))
      		console.log 'new fog color', newFogColor
      		@_tweenColor @scene.fog.color, @scene.fog.color, newFogColor, 400
      */

      _ref1 = this.organism.getNodes();
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        node = _ref1[_k];
        cells = node.getCells();
        /*
        
        			Relative changes to a node from its cells' factors' current conditions
        
        			factorsConditionSum = 0
        			factorsRelConditionSum = 0
        
        			for cell in cells
        
        				# Get the cell's factor's latest history
        				factorDisharmonyHistory = @organism.getFactorOfType(cell.factorType).disharmonyHistory
        				factorLatestHistory = factorDisharmonyHistory.slice(-10)
        				console.log '··· factor history', factorLatestHistory
        
        				# Total disharmony over this period
        				factorDisharmonySum = factorDisharmonySum + hist for hist in factorLatestHistory
        				console.log('··· factorDisharmonySum', factorDisharmonySum)
        
        				# Calculate the factor's average dishamonry over this period
        				factorDisharmonyAvg = factorDisharmonySum / factorLatestHistory.length
        				console.log '··· factorDisharmonyAvg', factorDisharmonyAvg
        
        				# Calculate the factor's current condition relative the average disharmony
        				factorCurrCondition = factorLatestHistory[factorLatestHistory.length - 1] / factorDisharmonyAvg
        				console.log '··· factorCurrCondition', factorCurrCondition
        
        				# Add it to the sum of current conditions
        				factorsRelConditionSum += factorCurrCondition
        				
        
        			#factorConditionAvg = factorConditionsSum / cells.length
        			factorsCurrCondition = factorsRelConditionSum / cells.length
        			console.log 'factor condition sum', factorsConditionSum
        			console.log 'factor condition cur', factorsCurrCondition
        			console.log '-- cur ball size', @balls[node.nodeId].ball3d.geometry.radius
        			console.log '-- new ball size', @opts.ballSize * factorsCurrCondition
        
        			# Tween size
        			ball = @balls[node.nodeId]
        			@_tweenBallSize ball, ball.ball3d.geometry.radius, @opts.ballSize * factorsCurrCondition
        */

        allFactorsChangeSum = 0;
        allFactorsChangeAvg = 0;
        for (_l = 0, _len3 = cells.length; _l < _len3; _l++) {
          cell = cells[_l];
          factor = this.organism.getFactorOfType(cell.factorType);
          factorDishStart = factor.disharmonyHistory[0];
          factorDishCurr = factor.disharmonyHistory[factor.disharmonyHistory.length - 1];
          allFactorsChangeSum += factorDishCurr / factorDishStart;
        }
        allFactorsChangeAvg = allFactorsChangeSum / cells.length;
        ball = this.balls[node.nodeId];
        newBallRelSize = Math.pow(allFactorsChangeAvg, 3.5);
        ballScaleFrom = {
          'x': ball.ball3d.scale.clone().x,
          'y': ball.ball3d.scale.clone().y,
          'z': ball.ball3d.scale.clone().z
        };
        ballScaleTo = {
          'x': newBallRelSize,
          'y': newBallRelSize,
          'z': newBallRelSize
        };
        _results.push(this._tweenSomething(ball.ball3d.scale, ballScaleFrom, ballScaleTo, 300));
      }
      return _results;
    };

    VisualOrganism.prototype._tweenBall = function(ball, from, to) {
      var tween;
      tween = new TWEEN.Tween(from).to(to, 300);
      tween.easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        return ball.ball3d.position.set(this.x, this.y, this.z);
      });
      return tween.start();
    };

    VisualOrganism.prototype._tweenBallSize = function(ball, from, to) {
      var tween;
      tween = new TWEEN.Tween({
        'size': from
      }).to({
        'size': to
      }, 100);
      tween.easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        return ball.ball3d.radius = this.size;
      });
      return tween.start();
    };

    VisualOrganism.prototype._tweenCameraDistance = function(to) {
      var tween, _this;
      _this = this;
      tween = new TWEEN.Tween({
        'distance': this.opts.cameraDistance
      }).to({
        'distance': to
      }, 400);
      tween.easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        return _this.opts.cameraDistance = this.distance;
      });
      return tween.start();
    };

    VisualOrganism.prototype.onCompareNodes = function(compareData) {
      var ball, node, _i, _len, _ref, _results;
      _ref = compareData.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        ball = this.balls[node.nodeId];
        _results.push(this._animateComparingBall(ball));
      }
      return _results;
    };

    VisualOrganism.prototype._animateComparingBall = function(ball) {
      var _this = this;
      return this._tweenBallColor(ball, this.opts.ballColor, this.opts.ballColorCompare, 200, function() {
        return _this._tweenBallColor(ball, ball.ball3d.material.ambient, _this.opts.ballColor, 1000);
      });
    };

    VisualOrganism.prototype.onInfluenceNode = function(influenceData) {
      return this._animateInfluencedBall(this.balls[influenceData.node.node.nodeId]);
    };

    VisualOrganism.prototype._animateInfluencedBall = function(ball) {
      var _this = this;
      return this._tweenBallColor(ball, this.opts.ballColor, this.opts.ballColorInfluence, 200, function() {
        return _this._tweenBallColor(ball, ball.ball3d.material.ambient, _this.opts.ballColor, 3000);
      });
    };

    VisualOrganism.prototype._tweenBallColor = function(ball, fromColor, toColor, duration, callback) {
      var colorFrom, colorTo, tween;
      colorFrom = {
        'r': fromColor.r,
        'g': fromColor.g,
        'b': fromColor.b
      };
      colorTo = {
        'r': toColor.r,
        'g': toColor.g,
        'b': toColor.b
      };
      tween = new TWEEN.Tween(colorFrom).to(colorTo, duration).easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        return ball.ball3d.material.ambient.setRGB(this.r, this.g, this.b);
      });
      if (callback) {
        tween.onComplete(callback);
      }
      return tween.start();
    };

    VisualOrganism.prototype._tweenColor = function(targetColor, fromColor, toColor, duration, callback) {
      var colorFrom, colorTo, tween;
      colorFrom = {
        'r': fromColor.r,
        'g': fromColor.g,
        'b': fromColor.b
      };
      colorTo = {
        'r': toColor.r,
        'g': toColor.g,
        'b': toColor.b
      };
      tween = new TWEEN.Tween(colorFrom).to(colorTo, duration).easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        return targetColor.setRGB(this.r, this.g, this.b);
      });
      if (callback) {
        tween.onComplete(callback);
      }
      return tween.start();
    };

    VisualOrganism.prototype._tweenSomething = function(something, from, to, duration, callback) {
      var tween;
      tween = new TWEEN.Tween(from).to(to, duration).easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        var key, _i, _len, _ref, _results;
        _ref = Object.keys(to);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(something[key] = to[key]);
        }
        return _results;
      });
      if (callback) {
        tween.onComplete(callback);
      }
      return tween.start();
    };

    return VisualOrganism;

  })();

  window.Audanism.Graphic.VisualOrganism = VisualOrganism;

}).call(this);
