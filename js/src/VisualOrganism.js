// Generated by CoffeeScript 1.4.0

/*
	WebGL organism visualizer
*/


(function() {
  var VisualOrganism;

  VisualOrganism = (function() {

    function VisualOrganism() {
      var _this;
      _this = this;
      this.opts = {
        'roomSize': 2000,
        'roomVertices': 100,
        'roomColor': 0x3AAB92,
        'ballSize': 20,
        'ballColor': 0xF2ED50,
        'ballColorCompare': 0xED8A34,
        'ballCompareTime': 1000,
        'ballColorInfluence': 0xED34A0,
        'ballInfluenceTime': 2000
      };
      EventDispatcher.listen('audanism/init/organism', this, this.onInitOrgasm);
      EventDispatcher.listen('audanism/influence/node', this, this.onInfluenceNode);
      EventDispatcher.listen('audanism/compare/nodes', this, this.onCompareNodes);
      this.initControls();
    }

    VisualOrganism.prototype.onInitOrgasm = function(organism) {
      console.log('#onInitOrgasm', organism, this);
      this.organism = organism;
      return this.buildScene();
    };

    VisualOrganism.prototype.buildScene = function() {
      var animate, createAxis, init,
        _this = this;
      console.log('#buildScene');
      this.camera;
      this.scene;
      this.renderer;
      this.lightAmb;
      this.lightSpot;
      this.balls = [];
      this.balls3d = [];
      this.numBalls = this.organism.getNodes().length;
      this.sphereSize = 500;
      this.frame = 0;
      this.mouseX = 0;
      this.mouseY = 0;
      this.mouseStartX = 0;
      this.mouseStartY = 0;
      this.mouseDX = 0;
      this.mouseDY = 0;
      this.mouseDown = false;
      this.keyLeft = false;
      this.keyRight = false;
      this.keyUp = false;
      this.keyDown = false;
      init = function() {
        var ball, ball3d, ballGeometry, ballMaterial, i, sphere, _i, _ref;
        _this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
        _this.camera.position = new THREE.Vector3(_this.sphereSize * 2, _this.sphereSize / 2, _this.sphereSize * 2);
        _this.camera.target = new THREE.Vector3(0, 0, 0);
        _this.camera.lookAt(_this.camera.target);
        _this.camera.setLens(35);
        _this.scene = new THREE.Scene();
        sphere = new THREE.Mesh(new THREE.SphereGeometry(_this.opts.roomSize, _this.opts.roomVertices, _this.opts.roomVertices), new THREE.MeshPhongMaterial({
          'ambient': _this.opts.roomColor,
          'side': THREE.BackSide,
          'shading': THREE.FlatShading,
          'blending': THREE.AdditiveBlending,
          'vertexColors': THREE.VertexColors
        }));
        _this.scene.add(sphere);
        for (i = _i = 0, _ref = _this.numBalls - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          ball = {
            ballId: i,
            pos: new THREE.Vector3(Math.round(Math.random() * _this.sphereSize - (_this.sphereSize / 2)), Math.round(Math.random() * _this.sphereSize - (_this.sphereSize / 2)), Math.round(Math.random() * _this.sphereSize - (_this.sphereSize / 2))),
            ballSize: _this.opts.ballSize
          };
          ballGeometry = new THREE.SphereGeometry(ball.ballSize, 20, 20);
          ballMaterial = new THREE.MeshLambertMaterial({
            'ambient': _this.opts.ballColor,
            'side': THREE.DoubleSide,
            'shading': THREE.FlatShading,
            'blending': THREE.AdditiveBlending,
            'vertexColors': THREE.VertexColors
          });
          ball3d = new THREE.Mesh(ballGeometry, ballMaterial);
          ball3d.ballId = ball.ballId;
          ball.ball3d = ball3d;
          ball.ball3d.position.set(ball.pos.x, ball.pos.y, ball.pos.z);
          console.log(ball.pos);
          _this.scene.add(ball.ball3d);
          _this.balls[i] = ball;
        }
        console.log(_this.balls);
        _this.lightAmb = new THREE.AmbientLight(0xffffff);
        _this.scene.add(_this.lightAmb);
        _this.lightSpot = new THREE.DirectionalLight(0xffffff, 0.2);
        _this.lightSpot.position.set(0, 1, 1);
        _this.scene.add(_this.lightSpot);
        _this.renderer = new THREE.WebGLRenderer({
          'alpha': false,
          'antialias': true
        });
        _this.renderer.setSize(window.innerWidth, window.innerHeight);
        console.log(_this.scene);
        return $('#container').append(_this.renderer.domElement);
      };
      createAxis = function() {
        _this.axis = new THREE.AxisHelper(500);
        return _this.scene.add(_this.axis);
        /*
        			textGeo = new THREE.TextGeometry 'Y', {
        				size: 20
        				height: 2
        				curveSegments: 6
        				font: "helvetiker"
        				style: "normal"
        			}
        			color = new THREE.Color()
        			color.setRGB(255, 250, 250)
        			textMaterial = new THREE.MeshBasicMaterial({ color: color })
        			text = new THREE.Mesh(textGeo , textMaterial)
        
        			text.position.x = @axis.geometry.vertices[1].x;
        			text.position.y = @axis.geometry.vertices[1].y;
        			text.position.z = @axis.geometry.vertices[1].z;
        			text.rotation   = @camera.rotation;
        			@scene.add(text);
        */

      };
      animate = function() {
        requestAnimationFrame(Audanism.Graphic["public"].animate);
        _this.frame++;
        if (_this.keyLeft) {
          _this.camera.rotation.y += 0.05;
        }
        if (_this.keyRight) {
          _this.camera.rotation.y -= 0.05;
        }
        if (_this.keyUp) {
          _this.camera.rotation.x += 0.05;
        }
        if (_this.keyDown) {
          _this.camera.rotation.x -= 0.05;
        }
        _this.camera.position.x = Math.sin(_this.frame / 200) * _this.sphereSize * 2;
        _this.camera.position.z = Math.cos(_this.frame / 200) * _this.sphereSize * 2;
        _this.camera.lookAt(_this.camera.target);
        return _this.renderer.render(_this.scene, _this.camera);
      };
      /*
      		function setSkyBgFromAngle(angle) {
      			var angle1 = angle + Math.PI / 8,
      				angle2 = angle - Math.PI / 8
      			var color1 = [
      					150 + Math.floor(80 * (Math.sin(angle1) / 2 + 0.5)),
      					150 + Math.floor(80 * (Math.sin(angle1 + Math.PI / 3) / 2 + 0.5)),
      					150 + Math.floor(80 * (Math.sin(angle1 + 2 * Math.PI / 3) / 2 + 0.5))
      				],
      				color2 = [
      					150 + Math.floor(80 * (Math.sin(angle2) / 2 + 0.5)),
      					150 + Math.floor(80 * (Math.sin(angle2 + Math.PI / 3) / 2 + 0.5)),
      					150 + Math.floor(80 * (Math.sin(angle2 + 2 * Math.PI / 3) / 2 + 0.5))
      				]
      
      			$body
      				.css({
      					'background-image': '-webkit-linear-gradient(left, rgb(' + color1.join(',') + '), rgb(' + color2.join(',') + '))'
      				})
      		}
      */

      window.Audanism.Graphic["public"] = {
        'animate': animate
      };
      init();
      createAxis();
      animate();
      return this;
    };

    VisualOrganism.prototype.initControls = function() {
      var _this = this;
      _this = this;
      $(document).on('keydown', function(e) {
        switch (e.which) {
          case 37:
            return _this.keyLeft = true;
          case 38:
            return _this.keyUp = true;
          case 39:
            return _this.keyRight = true;
          case 40:
            return _this.keyDown = true;
        }
      });
      return $(document).on('keyup', function(e) {
        switch (e.which) {
          case 37:
            return _this.keyLeft = false;
          case 38:
            return _this.keyUp = false;
          case 39:
            return _this.keyRight = false;
          case 40:
            return _this.keyDown = false;
        }
      });
    };

    VisualOrganism.prototype.onIteration = function() {};

    VisualOrganism.prototype.onCompareNodes = function(compareData) {
      var ball, node, _i, _len, _ref, _results;
      console.log('#onCompareNodes', compareData);
      _ref = compareData.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        ball = this.balls[node.nodeId];
        _results.push(this._animateComparingBall(ball));
      }
      return _results;
    };

    VisualOrganism.prototype._animateComparingBall = function(ball) {
      var _this = this;
      ball.ball3d.material.ambient.setHex(this.opts.ballColorCompare);
      return setTimeout(function() {
        return ball.ball3d.material.ambient.setHex(_this.opts.ballColor);
      }, this.opts.ballCompareTime);
    };

    VisualOrganism.prototype.onInfluenceNode = function(influenceData) {
      return this._animateInfluencedBall(this.balls[influenceData.node.node.nodeId]);
    };

    VisualOrganism.prototype._animateInfluencedBall = function(ball) {
      var _this = this;
      ball.ball3d.material.ambient.setHex(this.opts.ballColorInfluence);
      return setTimeout(function() {
        return ball.ball3d.material.ambient.setHex(_this.opts.ballColor);
      }, this.opts.ballInfluenceTime);
    };

    return VisualOrganism;

  })();

  window.Audanism.Graphic.VisualOrganism = VisualOrganism;

}).call(this);
