// Generated by CoffeeScript 1.4.0

/*
	Synth base class
*/


(function() {
  var Synth;

  Synth = (function() {

    function Synth(freq) {
      var SynthObj;
      console.log('new Synth', freq);
      this.freq = freq;
      this.audiolet = new Audiolet();
      SynthObj = function(audiolet, freq) {
        AudioletGroup.call(this, audiolet, 0, 1);
        this.gen = new Sine(audiolet, freq);
        this.mod = new Saw(audiolet, freq * 2);
        this.modMulAdd = new MulAdd(audiolet, freq / 2, freq);
        this.gain = new Gain(audiolet, 0.01);
        this.env = new PercussiveEnvelope(audiolet, 0, 0.1, 0.5);
        this.mod.connect(this.modMulAdd);
        this.modMulAdd.connect(this.gen);
        this.env.connect(this.gain, 0, 1);
        this.gen.connect(this.gain);
        this.gain.connect(this.outputs[0]);
        return this;
      };
      extend(SynthObj, AudioletGroup);
      this.synth = new SynthObj(this.audiolet, freq);
    }

    Synth.prototype.hit = function() {
      var callback, freqPattern, gatePattern,
        _this = this;
      console.log('--> hit!');
      freqPattern = new PSequence([this.freq], 2);
      gatePattern = new PSequence([0, 1], 2);
      callback = function(freq, gate) {
        _this.synth.env.gate.setValue(gate);
        return _this.synth.gen.frequency.setValue(freq);
      };
      return callback.bind(this.synth);
    };

    return Synth;

  })();

  Audanism.Sound.Synth = Synth;

}).call(this);
