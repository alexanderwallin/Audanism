// Generated by CoffeeScript 1.4.0

/*
	Instrument super-class
*/


(function() {
  var Instrument;

  Instrument = (function() {

    function Instrument(instrumentsIn, synthesizer, autoRelease) {
      var i, _ref;
      this.instrumentsIn = instrumentsIn;
      this.synthesizer = synthesizer;
      this.autoRelease = autoRelease;
      if ((_ref = this.autoRelease) == null) {
        this.autoRelease = true;
      }
      this.voices = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 120; i = ++_i) {
          _results.push(null);
        }
        return _results;
      })();
      this.noteTimers = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 120; i = ++_i) {
          _results.push(null);
        }
        return _results;
      })();
    }

    Instrument.prototype.createVoice = function(note) {
      if (this.beforeCreateVoice) {
        this.beforeCreateVoice(note);
      }
      if (!this.voices[note]) {
        this.voices[note] = new Audanism.Audio.Synthesizer[this.synthesizer](note);
        if (this.setupVoice) {
          this.setupVoice(this.voices[note]);
        }
        this.voices[note].masterVol.connect(this.instrumentsIn);
      }
      return this.voices[note];
    };

    Instrument.prototype.killVoiceAtNote = function(note) {
      var _this = this;
      if (this.voices[note]) {
        return setTimeout(function() {
          return _this.voices[note] = null;
        }, (this.voices[note].asdr.getEnvelopeDuration() * 1000) + 1);
      }
    };

    Instrument.prototype.noteOn = function(note, length) {
      var noteLength, voice,
        _this = this;
      if (this.noteTimers[note]) {
        clearTimeout(this.noteTimers[note]);
        this.noteTimers[note] = null;
      }
      voice = this.createVoice(note);
      if (length == null) {
        length = 0;
      }
      noteLength = this.autoRelease ? length : -1;
      voice.noteOn(noteLength);
      if (this.autoRelease) {
        this.noteTimers[note] = setTimeout(function() {
          _this.voices[note].stop();
          _this.voices[note].masterVol.disconnect(0);
          _this.voices[note] = null;
          clearTimeout(_this.noteTimers[note]);
          _this.noteTimers[note] = null;
          if (_this.onNoteOff) {
            return _this.onNoteOff(note);
          }
        }, (voice.asdr.getEnvelopeDuration() * 1000) + 10);
      }
      if (this.onNoteOn) {
        return this.onNoteOn(note, length);
      }
    };

    Instrument.prototype.notesOff = function() {
      var note, voice, _i, _len, _ref, _results,
        _this = this;
      _ref = this.voices;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        voice = _ref[_i];
        if (!voice) {
          continue;
        }
        note = voice.note;
        voice.noteOff();
        _results.push(setTimeout(function() {
          _this.voices[note] = null;
          clearTimeout(_this.noteTimers[note]);
          _this.noteTimers[note] = null;
          if (_this.onNoteOff) {
            return _this.onNoteOff(note);
          }
        }, voice.asdr.release + 1));
      }
      return _results;
    };

    return Instrument;

  })();

  window.Audanism.Audio.Instrument.Instrument = Instrument;

}).call(this);
