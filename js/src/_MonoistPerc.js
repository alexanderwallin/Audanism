// Generated by CoffeeScript 1.4.0

/*
	MonoistEnv synth - sine with an envelope
*/


(function() {
  var MonoistPerc;

  MonoistPerc = (function() {

    function MonoistPerc() {
      this.volNode = Audanism.Audio.audioContext.createGain();
      this.volNode.gain.value = 0.25;
      this.volNode.connect(Audanism.Audio.audioContext.destination);
      this.compressor = Audanism.Audio.audioContext.createDynamicsCompressor();
      this.compressor.connect(this.volNode);
      this.panner = Audanism.Audio.audioContext.createPanner();
      this.panner.setPosition(1 - Math.random() * 2, 0, 0);
      this.panner.connect(this.compressor);
      this.asdr = new Audanism.Audio.Module.ASDR(0.1, 0.1, 0.1, 0.5);
      this.envelope = Audanism.Audio.audioContext.createGain();
      this.envelope.gain.setValueAtTime(0, 0);
      this.envelope.connect(this.panner);
      this.osc = Audanism.Audio.audioContext.createOscillator();
      this.osc.frequency.value = 440;
      this.osc.connect(this.envelope);
      this.osc.start(0);
    }

    MonoistPerc.prototype.hit = function(note) {
      var attackEndTime, decayEndTime, now, releaseEndTime;
      now = Audanism.Audio.audioContext.currentTime;
      attackEndTime = now + this.asdr.attack;
      decayEndTime = attackEndTime + this.asdr.decay;
      releaseEndTime = decayEndTime + this.asdr.release;
      this.osc.frequency.value = Audanism.Audio.Harmonizer.getFreqFromNote(note);
      this.envelope.gain.cancelScheduledValues(now);
      this.envelope.gain.setValueAtTime(0, now);
      this.envelope.gain.exponentialRampToValueAtTime(1, attackEndTime);
      this.envelope.gain.exponentialRampToValueAtTime(this.asdr.sustain, decayEndTime);
      return this.envelope.gain.exponentialRampToValueAtTime(0, releaseEndTime + 0.2);
    };

    return MonoistPerc;

  })();

  window.Audanism.Audio.Synthesizer.MonoistPerc = MonoistPerc;

}).call(this);
