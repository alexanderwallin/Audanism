// Generated by CoffeeScript 1.10.0

/*
	MonoistEnvMulti synth - multiple oscillators with an envelope
 */

(function() {
  var MonoistEnvMod,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MonoistEnvMod = (function(superClass) {
    extend(MonoistEnvMod, superClass);

    function MonoistEnvMod(note) {
      MonoistEnvMod.__super__.constructor.call(this, note);
      this.asdr = new Audanism.Audio.Module.ASDR(0.03, 0.01, 100, 1.5);
      this.envelope1 = Audanism.Audio.audioContext.createGain();
      this.envelope1.gain.setValueAtTime(0, 0);
      this.envelope1.connect(this.pan);
      this.envelopes.push(this.envelope1);
      this.osc1 = Audanism.Audio.audioContext.createOscillator();
      this.osc1.type = this.getRandomOscType();
      this.osc1.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(this.note);
      this.osc1.connect(this.envelope1);
      this.oscillators.push(this.osc1);
      this.freqModGain1 = Audanism.Audio.audioContext.createGain();
      this.freqModGain1.gain.value = 5;
      this.freqModGain1.connect(this.osc1.frequency);
      this.freqMod1 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod1.type = this.getRandomOscType();
      this.freqMod1.frequency.value = 20;
      this.freqMod1.connect(this.freqModGain1);
      this.freqMod1.start(0);
      this.freqModGain2 = Audanism.Audio.audioContext.createGain();
      this.freqModGain2.gain.value = 7;
      this.freqModGain2.connect(this.osc1.frequency);
      this.freqMod2 = Audanism.Audio.audioContext.createOscillator();
      this.freqMod2.type = this.getRandomOscType();
      this.freqMod2.frequency.value = 6.234;
      this.freqMod2.connect(this.freqModGain2);
      this.freqMod2.start(0);
      this.osc1.start(0);
    }


    /*
    	 * Play a note
    	noteOn: (note) ->
    		now           = Audanism.Audio.audioContext.currentTime
    		attackEndTime = now + @asdr.attack
    
    		 * Attack
    		@envelope1.gain.cancelScheduledValues( now )
    		@envelope1.gain.setValueAtTime( @envelope1.gain.value, now )
    		@envelope1.gain.linearRampToValueAtTime( 1, attackEndTime )
    
    		 * Decay + sustain
    		@envelope1.gain.setTargetAtTime( @asdr.sustain / 100, attackEndTime, (@asdr.decay / 100) + 0.001 )
    
    		@noteIsOn = true
    
    
    	 * Kill a note
    	noteOff: () ->
    		now         = Audanism.Audio.audioContext.currentTime
    		releaseTime = now + @asdr.release
    
    		console.log(now)
    
    		 * Release
    		@envelope1.gain.cancelScheduledValues(now)
    		@envelope1.gain.setValueAtTime( @envelope1.gain.value, now )
    		@envelope1.gain.linearRampToValueAtTime( 0, releaseTime )
    
    		#@osc.frequency.value = 0
    		@noteIsOn = false
     */

    return MonoistEnvMod;

  })(Audanism.Audio.Synthesizer.Voice);

  window.Audanism.Audio.Synthesizer.MonoistEnvMod = MonoistEnvMod;

}).call(this);
