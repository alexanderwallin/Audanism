// Generated by CoffeeScript 1.10.0

/*
	Drone
 */

(function() {
  var Drone,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Drone = (function(superClass) {
    extend(Drone, superClass);

    function Drone(instrumentsIn, unison) {
      var i;
      this.instrumentsIn = instrumentsIn;
      this.unison = unison != null ? unison : true;
      Drone.__super__.constructor.call(this, this.instrumentsIn, 'MonoistEnvModWide', false);
      this.autoPans = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.voices.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.vibrates = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.voices.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.droneNote = 0;
    }

    Drone.prototype.setNote = function(note) {
      var j, k, len, len1, osc, ref, ref1, results, voice;
      this.droneNote = note;
      ref = this.voices;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        voice = ref[j];
        if (voice) {
          ref1 = voice.oscillators;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            osc = ref1[k];
            osc.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(note);
          }
          results.push(voice.setUnison(this.unison));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Drone.prototype.setUnison = function(unison) {
      var j, len, ref, results, voice;
      this.unison = unison;
      ref = this.voices;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        voice = ref[j];
        if (voice) {
          results.push(voice.setUnison(this.unison));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Drone.prototype.onNoteOn = function(note) {

      /*
      		 * Auto-pan
      		autoPan = {
      			note: note
      			frame: 0
      			interval: null
      			speed: 0.01 + Math.random() * 0.7
      		}
      
      		autoPan.interval = setInterval () =>
      			autoPan.frame++
      
      			xDeg = autoPan.frame + 90
      			zDeg = xDeg + 90
      			if zDeg > 90
      				zDeg = 180 - zDeg
      
      			x = Math.sin(autoPan.speed * xDeg * Math.PI / 10)
      			z = Math.sin(autoPan.speed * zDeg * Math.PI / 10)
      
      			console.log(x, z)
      			@voices[note].pan.setPosition( x, 0, z )
      		, 100
      
      		@autoPans[note] = autoPan
       */
      var vibrate;
      this.setUnison(this.unison);
      vibrate = {
        note: note,
        frame: -1,
        interval: null,
        speed: 0.1 + Math.random() * 1.3,
        maxGain: this.voices[note].masterVol.gain.value
      };
      this.voices[note].masterVol.gain.value = 0;
      vibrate.interval = setInterval((function(_this) {
        return function() {
          var dVol, e, error;
          try {
            vibrate.frame++;
            dVol = (1 + Math.sin((vibrate.speed / 2) * (vibrate.frame / 10) - Math.PI / 2)) / 2;
            return _this.voices[note].masterVol.gain.value = vibrate.maxGain * dVol;

            /*
            				if (dVol <= 0.01)
            					@voices[note].noteOff()
            					setTimeout
             */
          } catch (error) {
            e = error;
          }
        };
      })(this), 100);
      return this.vibrates[note] = vibrate;
    };

    Drone.prototype.onNoteOff = function(note) {
      if (this.autoPans[note]) {
        clearInterval(this.autoPans[note].interval);
        this.autoPans[note] = null;
      }
      if (this.vibrates[note]) {
        clearInterval(this.vibrates[note].interval);
        return this.vibrates[note] = null;
      }
    };

    Drone.prototype.kill = function() {
      var j, len, ref, results, vibrate;
      ref = this.vibrates;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        vibrate = ref[j];
        if (!vibrate) {
          continue;
        }
        if (vibrate.interval) {
          results.push(clearInterval(vibrate.interval));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Drone;

  })(Audanism.Audio.Instrument.Instrument);

  window.Audanism.Audio.Instrument.Drone = Drone;

}).call(this);
