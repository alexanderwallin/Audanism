// Generated by CoffeeScript 1.4.0

/*
	Drone
*/


(function() {
  var Drone,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Drone = (function(_super) {

    __extends(Drone, _super);

    function Drone(instrumentsIn) {
      var i;
      this.instrumentsIn = instrumentsIn;
      Drone.__super__.constructor.call(this, this.instrumentsIn, 'MonoistEnvModWide', false);
      this.autoPans = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.voices.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(null);
        }
        return _results;
      }).call(this);
      this.vibrates = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.voices.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(null);
        }
        return _results;
      }).call(this);
      this.droneNote = 0;
    }

    Drone.prototype.setNote = function(note) {
      var osc, voice, _i, _len, _ref, _results;
      this.droneNote = note;
      _ref = this.voices;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        voice = _ref[_i];
        if (voice) {
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = voice.oscillators;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              osc = _ref1[_j];
              _results1.push(osc.frequency.value = Audanism.Audio.Module.Harmonizer.getFreqFromNote(note));
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Drone.prototype.onNoteOn = function(note) {
      /*
      		# Auto-pan
      		autoPan = {
      			note: note
      			frame: 0
      			interval: null
      			speed: 0.01 + Math.random() * 0.7
      		}
      
      		autoPan.interval = setInterval () =>
      			autoPan.frame++
      
      			xDeg = autoPan.frame + 90
      			zDeg = xDeg + 90
      			if zDeg > 90
      				zDeg = 180 - zDeg
      
      			x = Math.sin(autoPan.speed * xDeg * Math.PI / 10)
      			z = Math.sin(autoPan.speed * zDeg * Math.PI / 10)
      
      			console.log(x, z)
      			@voices[note].pan.setPosition( x, 0, z )
      		, 100
      
      		@autoPans[note] = autoPan
      */

      var vibrate,
        _this = this;
      vibrate = {
        note: note,
        frame: -1,
        interval: null,
        speed: 0.1 + Math.random() * 1.3,
        maxGain: this.voices[note].masterVol.gain.value
      };
      this.voices[note].masterVol.gain.value = 0;
      vibrate.interval = setInterval(function() {
        var dVol;
        try {
          vibrate.frame++;
          dVol = (1 + Math.sin((vibrate.speed / 2) * (vibrate.frame / 10) - Math.PI / 2)) / 2;
          return _this.voices[note].masterVol.gain.value = vibrate.maxGain * dVol;
          /*
          				if (dVol <= 0.01)
          					@voices[note].noteOff()
          					setTimeout
          */

        } catch (e) {

        }
      }, 100);
      return this.vibrates[note] = vibrate;
    };

    Drone.prototype.onNoteOff = function(note) {
      if (this.autoPans[note]) {
        clearInterval(this.autoPans[note].interval);
        this.autoPans[note] = null;
      }
      if (this.vibrates[note]) {
        clearInterval(this.vibrates[note].interval);
        return this.vibrates[note] = null;
      }
    };

    Drone.prototype.kill = function() {
      var vibrate, _i, _len, _ref, _results;
      _ref = this.vibrates;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vibrate = _ref[_i];
        if (!vibrate) {
          continue;
        }
        if (vibrate.interval) {
          _results.push(clearInterval(vibrate.interval));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Drone;

  })(Audanism.Audio.Instrument.Instrument);

  window.Audanism.Audio.Instrument.Drone = Drone;

}).call(this);
