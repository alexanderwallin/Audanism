// Generated by CoffeeScript 1.10.0

/*
	Conductor
 */

(function() {
  var Conductor;

  Conductor = (function() {
    function Conductor() {
      var AudioContext, e, error, i;
      try {
        AudioContext = window.AudioContext || window.webkitAudioContext;
        Audanism.Audio.audioContext = new AudioContext;
      } catch (error) {
        e = error;
        alert('Sorry, your browser does not support AudioContext, try Chrome!');
      }
      this.isMuted = false;
      this.createEndChain();
      this.noise = new Audanism.Audio.Instrument.NoisePink(this.instrumentsIn);
      this.noise.setLpfFrequency(1000);
      this.factorDrones = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = Audanism.Environment.Organism.NUM_FACTORS - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(new Audanism.Audio.Instrument.Drone(this.instrumentsIn));
        }
        return results;
      }).call(this);
      this.compareInstr = new Audanism.Audio.Instrument.TestInstrument(this.instrumentsIn);
      this.influencePad = new Audanism.Audio.Instrument.Pad(this.instrumentsIn);
      this.arpeggiator = new Audanism.Audio.Instrument.PercArpeggiator(this.instrumentsIn, 4, 0);
      EventDispatcher.listen('audanism/controls/togglesound', this, this.toggleMute);
      EventDispatcher.listen('audanism/iteration', this, this.updateSounds);
      EventDispatcher.listen('audanism/influence/node', this, this.handleNodeInfluence);
      EventDispatcher.listen('audanism/alter/nodes', this, this.handleNodeComparison);
      EventDispatcher.listen('audanism/performance/bad', this, this.onPermanceBad);
      EventDispatcher.listen('audanism/organism/stressmode', this, this.onStressModeChange);
    }

    Conductor.prototype.createEndChain = function() {
      this["void"] = Audanism.Audio.audioContext.createOscillator();
      this["void"].frequency.value = 440;
      this.voidGain = Audanism.Audio.audioContext.createGain();
      this.voidGain.gain.value = 0.0;
      this.instrumentsIn = Audanism.Audio.audioContext.createGain();
      this.instrumentsIn.gain.value = 0.2;
      this.masterRev = new Audanism.Audio.FX.Reverb(2, 50, 1);
      this.compressor = Audanism.Audio.audioContext.createDynamicsCompressor();
      this.compressor.threshold.value = -24;
      this.compressor.ratio.value = 6;
      this.analyser = Audanism.Audio.audioContext.createAnalyser();
      this.analyser.fftSize = 512;
      this["void"].connect(this.voidGain);
      this.voidGain.connect(this.instrumentsIn);
      this["void"].start(0);
      this.instrumentsIn.connect(this.masterRev["in"]);
      this.masterRev.out.connect(this.compressor);
      this.instrumentsIn.connect(this.compressor);
      this.compressor.connect(this.analyser);
      return this.analyser.connect(Audanism.Audio.audioContext.destination);
    };

    Conductor.prototype.getFrequencyData = function() {
      var frequencyData;
      frequencyData = new Uint8Array(this.analyser.frequencyBinCount);
      this.analyser.getByteFrequencyData(frequencyData);
      return frequencyData;
    };

    Conductor.prototype.setOrganism = function(organism) {
      this.organism = organism;
    };

    Conductor.prototype.mute = function() {
      var drone, j, k, len, len1, ref, ref1, results;
      console.log('Conductor #mute()');
      this.isMuted = true;
      this.arpeggiator.stop();
      ref = this.factorDrones;
      for (j = 0, len = ref.length; j < len; j++) {
        drone = ref[j];
        drone.notesOff();
      }
      ref1 = this.factorDrones;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        drone = ref1[k];
        results.push(drone.kill());
      }
      return results;
    };

    Conductor.prototype.unmute = function() {
      var drone, j, len, ref, results;
      console.log('Conductor #unmute()');
      this.isMuted = false;
      this.arpeggiator.start();
      ref = this.factorDrones;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        drone = ref[j];
        results.push(drone.noteOn(drone.droneNote));
      }
      return results;
    };

    Conductor.prototype.toggleMute = function() {
      console.log('Conductor #toggleMute');
      if (this.isMuted) {
        this.unmute();
      } else {
        this.mute();
      }
      return console.log('... now muted:', this.isMuted);
    };

    Conductor.prototype.updateSounds = function(iterationInfo) {
      var disharmonyData, disharmonyNew, disharmonyOld, disharmonyRatio, drone, factors, fd, j, len, note, ref;
      if (this.isMuted) {
        return;
      }
      factors = this.organism.getFactors();
      fd = 0;
      ref = this.factorDrones;
      for (j = 0, len = ref.length; j < len; j++) {
        drone = ref[j];
        note = Audanism.Audio.Module.Harmonizer.getNoteFromFreq(factors[fd].disharmony / 10);
        if (iterationInfo.count === 1) {
          drone.noteOn(note);
        } else {
          drone.setNote(note);
        }
        fd++;
      }
      if (iterationInfo.count % 10 === !0) {
        return;
      }
      disharmonyData = this.organism.getDisharmonyHistoryData(200);
      disharmonyNew = disharmonyData[disharmonyData.length - 1][2];
      disharmonyOld = disharmonyData[0][2];
      disharmonyRatio = disharmonyNew / disharmonyOld;
      if (this.noise != null) {
        this.noise.setLpfFrequency(disharmonyRatio * 1000);
      }
      if (iterationInfo.count % 4 === 1) {
        this.arpeggiator.midNote += disharmonyRatio > 1 ? 1 : -1;
      }
      if (iterationInfo.count % 9 === 1 && disharmonyData.length > 1) {
        this.arpeggiator.shuffleAmount = 0.01 * (Math.round(disharmonyNew) % 100);
      }
      if (iterationInfo.count % 10 === 1) {
        return this.arpeggiator.setFrequency(Math.max(6, disharmonyRatio));
      }
    };

    Conductor.prototype.handleNodeComparison = function(comparisonData) {
      var freq, i, j, node, note, ref, results;
      if (this.isMuted) {
        return;
      }
      results = [];
      for (i = j = 0, ref = comparisonData.nodes.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        node = comparisonData.nodes[i];
        freq = 90 + Math.pow(node.getCell(comparisonData.factorType).factorValue, 1.3);
        note = Audanism.Audio.Module.Harmonizer.getNoteFromFreq(freq);
        results.push(this.compareInstr.noteOn(note));
      }
      return results;
    };

    Conductor.prototype.handleNodeInfluence = function(influenceData) {
      var nodeFreq, nodeId, nodePan;
      if (this.isMuted) {
        return;
      }
      if (!this.organism || !influenceData.meta) {
        return;
      }
      nodeId = influenceData.node.node.nodeId;
      nodeFreq = 80 + (nodeId * 40);
      nodePan = nodeId / this.organism.getNodes().length;
      return this.influencePad.noteOn(Audanism.Audio.Module.Harmonizer.getNoteFromFreq(nodeFreq));
    };

    Conductor.prototype.onStressModeChange = function(inStressMode) {
      var drone, j, len, ref, results;
      ref = this.factorDrones;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        drone = ref[j];
        results.push(drone.setUnison(!inStressMode));
      }
      return results;
    };

    Conductor.prototype.onPermanceBad = function() {
      var arpFreq;
      if (this.isMuted) {
        return;
      }
      this.mute();
      arpFreq = this.arpeggiator.frequency;
      this.arpeggiator.setFrequency(0.2);
      return setTimeout((function(_this) {
        return function() {
          _this.unmute();
          return _this.arpeggiator.setFrequency(arpFreq);
        };
      })(this), 10000);
    };

    return Conductor;

  })();

  window.Audanism.Audio.Conductor = Conductor;

}).call(this);
