// Generated by CoffeeScript 1.4.0

/*
	PercArpeggiator
*/


(function() {
  var PercArpeggiator,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PercArpeggiator = (function(_super) {

    __extends(PercArpeggiator, _super);

    function PercArpeggiator(instrumentsIn, frequency, shuffleAmount) {
      var _ref, _ref1;
      this.instrumentsIn = instrumentsIn;
      this.frequency = frequency;
      this.shuffleAmount = shuffleAmount;
      PercArpeggiator.__super__.constructor.call(this, this.instrumentsIn, 'MonoistPerc', true);
      if ((_ref = this.frequency) == null) {
        this.frequency = 1;
      }
      if ((_ref1 = this.shuffleAmount) == null) {
        this.shuffleAmount = 0.333;
      }
      this.fixedShuffle = false;
      this.intervalTime = 1 / this.frequency;
      this.midNote = 80;
      this.noteSpread = 60;
      this.interval = null;
      this.count = 0;
      this.isRunning = false;
      this.shouldRestart = false;
      this.hpfVal = 0;
      this.lpfVal = 20000;
      /*
      		window.addEventListener 'mousemove', (e) =>
      			@hpfVal = (e.pageX / window.innerWidth) * 2000
      			@lpfVal = 20000 - (e.pageY / window.innerHeight) * 20000
      			console.log(@hpfVal, @lpfVal)
      */

    }

    PercArpeggiator.prototype.setFrequency = function(frequency) {
      this.frequency = frequency;
      this.intervalTime = 1 / this.frequency;
      return this.shouldRestart = true;
    };

    PercArpeggiator.prototype.beforeCreateVoice = function(note) {
      if (this.voices[note]) {
        return this.voices[note] = null;
      }
    };

    PercArpeggiator.prototype.setupVoice = function(voice) {
      voice.pan.setPosition(1 - Math.random() * 2, 0, 1 - Math.random() * 2);
      voice.waitTime = this.count % 2 === 0 || (!this.fixedShuffle && randomInt(0, 1) === 0) ? this.shuffleAmount * this.intervalTime : 0;
      voice.hpf.frequency.value = this.hpfVal;
      voice.lpf.frequency.value = this.lpfVal;
      voice.modGain2.gain.value = 0.5 * (1 + Math.sin(this.count / (this.intervalTime * 100) - Math.PI / 2)) * voice.modGain2.gain.value;
      return voice.masterVol.gain.value = 0.3;
    };

    PercArpeggiator.prototype.start = function() {
      var _this = this;
      this.isRunning = true;
      if (this.interval) {
        this.stop();
      }
      return this.interval = setInterval(function() {
        _this.count++;
        return _this.hit();
      }, this.intervalTime * 1000);
    };

    PercArpeggiator.prototype.stop = function() {
      this.isRunning = false;
      clearInterval(this.interval);
      return this.interval = null;
    };

    PercArpeggiator.prototype.hit = function() {
      if (this.shouldRestart) {
        this.stop();
        this.start();
        this.shouldRestart = false;
      } else {
        this.noteOn(this.midNote - randomInt(0, this.noteSpread));
      }
      return this.count++;
    };

    PercArpeggiator.prototype.onNoteOn = function(note) {
      return this.count++;
    };

    PercArpeggiator.prototype.onNoteOff = function(note) {};

    return PercArpeggiator;

  })(Audanism.Audio.Instrument.Instrument);

  window.Audanism.Audio.Instrument.PercArpeggiator = PercArpeggiator;

}).call(this);
