// Generated by CoffeeScript 1.4.0
(function() {
  var Blip, BlipObj;

  BlipObj = function(audiolet) {
    var envEnd;
    AudioletGroup.apply(this, [audiolet, 0, 1]);
    this.gen = new Sine(audiolet, 200 + (Math.random() * 1000));
    envEnd = function() {
      console.log('envelope end', this);
      return this.audiolet.scheduler.addRelative(0, this.remove.bind(this));
    };
    envEnd.bind(this);
    this.gain = new Gain(audiolet, 0.5);
    this.env = new ADSREnvelope(audiolet, 1, .1, 0.2, 0.9, 0.5);
    this.env.connect(this.gain, 0, 1);
    return this.gain.connect(this.outputs[0]);
  };

  extend(BlipObj, AudioletGroup);

  /*
  	Blip
  */


  Blip = (function() {

    function Blip(freq) {
      console.log('new Synth', freq);
      this.freq = freq;
      this.audiolet = new Audiolet();
      this.synth = new BlipObj(this.audiolet);
      this.synth.connect(this.audiolet.output);
    }

    Blip.prototype.hit = function() {
      var callback, gatePattern, patterns,
        _this = this;
      console.log('--> hit!');
      gatePattern = new PSequence([1, 0], 2);
      patterns = [gatePattern];
      callback = function(gate) {
        console.log('callback', this, gate);
        return this.env.gate.setValue(gate);
      };
      callback.bind(this.synth);
      this.audiolet.scheduler.play(patterns, 2, function(gate) {
        console.log('callback', _this, gate);
        return _this.synth.env.gate.setValue(gate);
      });
    };

    return Blip;

  })();

  Audanism.Sound.BlipObj = BlipObj;

  Audanism.Sound.Blip = Blip;

}).call(this);
